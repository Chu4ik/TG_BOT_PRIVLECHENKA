# handlers/reports/client_payments_report.py

import logging
import re
from datetime import date
from decimal import Decimal
from typing import Optional, List, Dict

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ db_operations/report_payment_operations
from db_operations.report_payment_operations import ( # <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∏–∑ report_payment_operations
    get_unpaid_invoices,
    confirm_payment_in_db,
    update_partial_payment_in_db,
    reverse_payment_in_db,
    UnpaidInvoice # –ù–æ–≤—ã–π namedtuple
)
from states.order import OrderFSM # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç—Ç–æ—Ç FSM

router = Router()
logger = logging.getLogger(__name__)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
def escape_markdown_v2(text: str) -> str:
    """Escapes special characters for MarkdownV2."""
    special_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f"([{re.escape(special_chars)}])", r"\\\1", text)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

def build_unpaid_invoices_keyboard(invoices: List[UnpaidInvoice]) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
    """
    buttons = []
    for invoice in invoices:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: ID_–î–î –ú–ú –ì–ì–ì–ì –ö–ª–∏–µ–Ω—Ç –°—É–º–º–∞
        # –ü—Ä–∏–º–µ—Ä: 16_06 07 2025 –ö–ª–∏–µ–Ω—Ç 123.45‚Ç¥
        if invoice.confirmation_date:
            day_part = invoice.confirmation_date.strftime('%d')
            month_year_part = invoice.confirmation_date.strftime('%m %Y')
            date_str_formatted = f"{day_part} {month_year_part}"
        else:
            date_str_formatted = "–ù/–î"

        button_text = f"{invoice.order_id}_{date_str_formatted} {invoice.client_name} {invoice.outstanding_balance:.2f}‚Ç¥" # <--- –ò–ó–ú–ï–ù–ï–ù–û
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(button_text),
                callback_data=f"view_invoice_details_{invoice.order_id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –æ–±—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    buttons.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_unpaid_invoices"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu") # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def format_unpaid_invoice_details(invoice: UnpaidInvoice) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
    """
    confirmation_date_str = (
        invoice.confirmation_date.strftime('%Y-%m-%d')
        if invoice.confirmation_date
        else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    )
    due_date_str = (
        invoice.due_date.strftime('%Y-%m-%d')
        if invoice.due_date
        else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    )

    status_map = {
        'unpaid': '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
        'partially_paid': '–ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ',
        'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
        'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
    }
    payment_status_display_name = status_map.get(invoice.payment_status, invoice.payment_status)

    text = (
        f"üìã *–î–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ‚Ññ{escape_markdown_v2(invoice.invoice_number)}:*\n"
        f"üÜî ID –ó–∞–∫–∞–∑–∞: `{invoice.order_id}`\n"
        f"üìÖ –î–∞—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: `{confirmation_date_str}`\n"
        f"üìÖ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: `{due_date_str}`\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {escape_markdown_v2(invoice.client_name)}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: `{invoice.total_amount:.2f} ‚Ç¥`\n"
        f"üíµ –û–ø–ª–∞—á–µ–Ω–æ: `{invoice.amount_paid:.2f} ‚Ç¥`\n"
        f"‚ö†Ô∏è –û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ: `{invoice.outstanding_balance:.2f} ‚Ç¥`\n"
        f"üìä –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: `{escape_markdown_v2(payment_status_display_name)}`"
    )
    return text


def build_invoice_details_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –æ–ø—Ü–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã.
    """
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"confirm_payment_{order_id}")], # <--- –ò–°–ü–†–ê–í–õ–ï–ù–û
        [InlineKeyboardButton(text="‚úçÔ∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"partial_payment_{order_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"reverse_payment_{order_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_unpaid_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –û–¢–ß–ï–¢–ê "–û–ü–õ–ê–¢–´ –ö–õ–ò–ï–ù–¢–û–í" ---

@router.message(Command("payments")) # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /payments –∏–ª–∏ –∫–Ω–æ–ø–∫—É
@router.message(F.text == "üí∞ –û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º") # –ï—Å–ª–∏ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.callback_query(F.data == "back_to_unpaid_list") # <--- –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
@router.callback_query(F.data == "refresh_unpaid_invoices") # <--- –î–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
async def show_client_payments_report(callback_or_message, state: FSMContext, db_pool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
    """
    message_object: Message | None = None
    is_callback = isinstance(callback_or_message, CallbackQuery)

    if is_callback:
        await callback_or_message.answer()
        message_object = callback_or_message.message
    else:
        message_object = callback_or_message

    if message_object is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ 'callback_or_message'.")
        # Fallback for error handling
        if is_callback and callback_or_message.message:
            await callback_or_message.message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."), parse_mode="MarkdownV2")
        elif isinstance(callback_or_message, Message):
            await callback_or_message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."), parse_mode="MarkdownV2")
        return

    await state.clear() # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª–æ –∫–∞–∫–æ–µ-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–µ
    
    invoices = await get_unpaid_invoices(db_pool)

    keyboard = build_unpaid_invoices_keyboard(invoices)

    if not invoices:
        report_text = escape_markdown_v2("–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.")
        if is_callback:
            try:
                await message_object.edit_text(report_text, parse_mode="MarkdownV2")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ): {e}")
                await message_object.answer(report_text, parse_mode="MarkdownV2")
        else:
            await message_object.answer(report_text, parse_mode="MarkdownV2")
        return

    header_text = escape_markdown_v2("–°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö:") # <--- –ó–∞–≥–æ–ª–æ–≤–æ–∫

    if is_callback:
        try:
            await message_object.edit_text(header_text, reply_markup=keyboard, parse_mode="MarkdownV2")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ) –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É: {e}")
            await message_object.answer(header_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await message_object.answer(header_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    
    await state.set_state(OrderFSM.viewing_unpaid_invoices_list)


@router.callback_query(F.data.startswith("view_invoice_details_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def view_invoice_details(callback: CallbackQuery, state: FSMContext, db_pool):
    order_id = int(callback.data.split("view_invoice_details_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    # –ü—Ä–∏–¥–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ db_operations –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å get_unpaid_invoices –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å.
    # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–ª–æ—Å—å –¥–ª—è OrderDetail
    conn = None
    invoice = None
    try:
        conn = await db_pool.acquire()
        record = await conn.fetchrow("""
            SELECT
                o.order_id,
                o.invoice_number,
                o.confirmation_date,
                c.name AS client_name,
                o.total_amount,
                o.amount_paid,
                (o.total_amount - o.amount_paid) AS outstanding_balance,
                o.payment_status,
                o.due_date
            FROM
                orders o
            JOIN
                clients c ON o.client_id = c.client_id
            WHERE
                o.order_id = $1;
        """, order_id)
        if record:
            invoice = UnpaidInvoice(**record)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π #{order_id}: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π.", show_alert=True)
        if conn: await db_pool.release(conn)
        return
    finally:
        if conn:
            await db_pool.release(conn)

    if invoice:
        await state.update_data(current_invoice_id=order_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        details_text = format_unpaid_invoice_details(invoice)
        keyboard = build_invoice_details_keyboard(order_id)
        
        await callback.message.edit_text(details_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await callback.answer("–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    
    await callback.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏


@router.callback_query(F.data.startswith("confirm_payment_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def handle_confirm_payment(callback: CallbackQuery, state: FSMContext, db_pool):
    order_id = int(callback.data.split("confirm_payment_")[1])
    
    success = await confirm_payment_in_db(db_pool, order_id)
    if success:
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await show_client_payments_report(callback.message, state, db_pool) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–∞
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.", show_alert=True)
    await callback.answer()

@router.callback_query(F.data.startswith("partial_payment_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def handle_partial_payment_input(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("partial_payment_")[1])
    await state.update_data(order_to_partial_pay=order_id)
    
    await callback.message.edit_text(escape_markdown_v2("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã:"), parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.entering_partial_payment_amount)
    await callback.answer()

@router.message(StateFilter(OrderFSM.entering_partial_payment_amount))
async def process_partial_payment_amount(message: Message, state: FSMContext, db_pool):
    amount_text = message.text.strip()
    try:
        partial_amount = Decimal(amount_text)
        if partial_amount < 0:
            await message.answer(escape_markdown_v2("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"), parse_mode="MarkdownV2")
            return
    except Exception:
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):"), parse_mode="MarkdownV2")
        return

    data = await state.get_data()
    order_id = data.get("order_to_partial_pay")

    if not order_id:
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã."), parse_mode="MarkdownV2")
        await state.clear()
        return

    success = await update_partial_payment_in_db(db_pool, order_id, partial_amount)
    if success:
        await message.answer(escape_markdown_v2(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ `{partial_amount:.2f}` –≥—Ä–Ω –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞."), parse_mode="MarkdownV2")
        await show_client_payments_report(message, state, db_pool) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–∞
    else:
        await message.answer(escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã."), parse_mode="MarkdownV2")
        await state.clear() # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª—É—á—à–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞

@router.callback_query(F.data.startswith("reverse_payment_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def handle_reverse_payment(callback: CallbackQuery, state: FSMContext, db_pool):
    order_id = int(callback.data.split("reverse_payment_")[1])
    
    success = await reverse_payment_in_db(db_pool, order_id)
    if success:
        await callback.answer("‚Ü©Ô∏è –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞/—Å–±—Ä–æ—à–µ–Ω–∞.", show_alert=True)
        await show_client_payments_report(callback.message, state, db_pool) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–∞
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã.", show_alert=True)
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
@router.callback_query(F.data == "back_to_unpaid_list", StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def back_to_unpaid_list_handler(callback: CallbackQuery, state: FSMContext, db_pool):
    await show_client_payments_report(callback.message, state, db_pool)
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
@router.callback_query(F.data == "refresh_unpaid_invoices", StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def refresh_unpaid_invoices_handler(callback: CallbackQuery, state: FSMContext, db_pool):
    await show_client_payments_report(callback.message, state, db_pool)
    await callback.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=False)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é" (–µ—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞)
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_from_payments(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(escape_markdown_v2("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."), parse_mode="MarkdownV2")
    await callback.answer()