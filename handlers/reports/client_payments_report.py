# handlers/reports/client_payments_report.py

import logging
import re
from datetime import date, datetime
from decimal import Decimal
from typing import Optional, List, Dict

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ò–ó–ú–ï–ù–ï–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø
from utils.markdown_utils import escape_markdown_v2 # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π aiogram.utils.markdown


from db_operations.report_payment_operations import (
    get_unpaid_invoices,
    confirm_payment_in_db,
    update_partial_payment_in_db,
    reverse_payment_in_db,
    get_today_paid_invoices,
    get_single_unpaid_invoice_details,
    UnpaidInvoice,
    TodayPaidInvoice
)
from states.order import OrderFSM 


router = Router()
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---

def build_unpaid_invoices_keyboard(invoices: List[UnpaidInvoice]) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.
    """
    buttons = []
    for invoice in invoices:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—Ä–æ–º–µ ID –∏ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
        button_text = (
            f"–ó–∞–∫–∞–∑ ‚Ññ{str(invoice.order_id)} {invoice.client_name}"
        )
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(button_text), # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–ï–°–¨ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                callback_data=f"view_invoice_details_{invoice.order_id}"
            )
        ])
    
    buttons.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_unpaid_invoices"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_invoice_details_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –æ–ø—Ü–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã.
    """
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"confirm_payment_{order_id}")],
        [InlineKeyboardButton(text="‚úçÔ∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=f"partial_payment_{order_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"reverse_payment_{order_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_unpaid_list")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ format_unpaid_invoice_details
def format_unpaid_invoice_details(invoice: UnpaidInvoice) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π,
    –≤–∫–ª—é—á–∞—è –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤.
    –ö–∞–∂–¥–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç—Å—è.
    """
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ NamedTuple, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    invoice_number_escaped = escape_markdown_v2(invoice.invoice_number)
    order_id_escaped = escape_markdown_v2(str(invoice.order_id)) 
    client_name_escaped = escape_markdown_v2(invoice.client_name)
    payment_status_display_name = {
        'unpaid': '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ',
        'partially_paid': '–ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ',
        'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
        'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
    }.get(invoice.payment_status, invoice.payment_status)
    payment_status_display_name_escaped = escape_markdown_v2(payment_status_display_name)

    confirmation_date_str = (
        invoice.confirmation_date.strftime('%Y-%m-%d')
        if invoice.confirmation_date
        else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    )
    due_date_str = (
        invoice.due_date.strftime('%Y-%m-%d')
        if invoice.due_date
        else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ö–ê–ñ–î–£–Æ –°–¢–†–û–ö–£, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    # –î–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2, escape_markdown_v2 –¥–æ–ª–∂–Ω–∞ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è
    # —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.
    
    text_parts = []
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text_parts.append(escape_markdown_v2(f"üìã *–î–µ—Ç–∞–ª–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ‚Ññ{invoice_number_escaped}:*\n")) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
    # ID –ó–∞–∫–∞–∑–∞
    text_parts.append(f"üÜî ID –ó–∞–∫–∞–∑–∞: `{order_id_escaped}`\n") 
    # –î–∞—Ç—ã
    text_parts.append(f"üìÖ –î–∞—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: `{escape_markdown_v2(confirmation_date_str)}`\n") 
    text_parts.append(f"üìÖ –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: `{escape_markdown_v2(due_date_str)}`\n") 
    # –ö–ª–∏–µ–Ω—Ç
    text_parts.append(f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name_escaped}\n")
    # –°—É–º–º—ã
    text_parts.append(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: `{escape_markdown_v2(f'{invoice.total_amount:.2f}')} ‚Ç¥`\n")
    text_parts.append(f"üíµ –í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ (–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è): `{escape_markdown_v2(f'{invoice.total_payments_received:.2f}')} ‚Ç¥`\n")
    
    if invoice.total_credits_issued > 0:
        text_parts.append(f"‚Ü©Ô∏è –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: `{escape_markdown_v2(f'{invoice.total_credits_issued:.2f}')} ‚Ç¥`\n")
    
    # –û—Å—Ç–∞—Ç–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
    text_parts.append(
        f"‚ö†Ô∏è *–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ: `{escape_markdown_v2(f'{invoice.actual_outstanding_balance:.2f}')} ‚Ç¥`*\n"
        f"üìä –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (–∏–∑ –Ω–∞–∫–ª–∞–¥–Ω–æ–π): `{payment_status_display_name_escaped}`"
    )
    return "".join(text_parts)


# --- –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø –û–¢–ß–ï–¢–ê "–û–ü–õ–ê–¢–´ –ö–õ–ò–ï–ù–¢–û–í" ---

@router.message(Command("payments")) 
@router.message(F.text == "üí∞ –û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º") 
@router.callback_query(F.data == "back_to_unpaid_list")
@router.callback_query(F.data == "refresh_unpaid_invoices")
async def show_client_payments_report(callback_or_message, state: FSMContext, db_pool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.
    """
    message_object: Message | None = None
    is_callback = isinstance(callback_or_message, CallbackQuery)

    if is_callback:
        await callback_or_message.answer()
        message_object = callback_or_message.message
    else:
        message_object = callback_or_message

    if message_object is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ 'callback_or_message'.")
        if is_callback and callback_or_message.message:
            await callback_or_message.message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."), parse_mode="MarkdownV2")
        elif isinstance(callback_or_message, Message):
            await callback_or_message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."), parse_mode="MarkdownV2")
        return

    await state.clear()
    
    invoices = await get_unpaid_invoices(db_pool)

    keyboard = build_unpaid_invoices_keyboard(invoices)

    if not invoices:
        report_text = escape_markdown_v2("–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö.")
        
        if is_callback:
            try:
                await message_object.edit_text(report_text, parse_mode="MarkdownV2")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ): {e}")
                await message_object.answer(report_text, parse_mode="MarkdownV2")
        else:
            await message_object.answer(report_text, parse_mode="MarkdownV2")
        return

    header_text = escape_markdown_v2("–°–ø–∏—Å–æ–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö:")

    if is_callback:
        try:
            await message_object.edit_text(header_text, reply_markup=keyboard, parse_mode="MarkdownV2")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ) –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É: {e}")
            await message_object.answer(header_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await message_object.answer(header_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    
    await state.set_state(OrderFSM.viewing_unpaid_invoices_list)


@router.message(Command("financial_report_today"))
async def show_financial_report_today(message: Message, db_pool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ –∏ –æ–±—â–∞—è —Å—É–º–º–∞.
    """
    today = date.today()
    today_str = today.strftime('%d.%m.%Y')
    
    paid_invoices = await get_today_paid_invoices(db_pool)
    
    report_parts = []
    report_parts.append(f"üìä *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ {escape_markdown_v2(today_str)}:*\n\n")
    
    total_paid_amount = Decimal('0.00')

    if not paid_invoices:
        report_parts.append(escape_markdown_v2("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç –ø–æ –Ω–∞–∫–ª–∞–¥–Ω—ã–º."))
    else:
        for i, invoice in enumerate(paid_invoices):
            report_parts.append(
                f"*{i+1}\\. –ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{escape_markdown_v2(invoice.invoice_number)}*\n"
                f"   –ö–ª–∏–µ–Ω—Ç: {escape_markdown_v2(invoice.client_name)}\n"
                f"   –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: `{escape_markdown_v2(f'{invoice.amount_paid:.2f}')} ‚Ç¥`\n"
                f"   –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: `{escape_markdown_v2(invoice.actual_payment_date.strftime('%Y-%m-%d'))}`\n"
                f"{escape_markdown_v2('----------------------------------')}\n"
            )
            total_paid_amount += invoice.amount_paid
        
        report_parts.append(f"*–ò–¢–û–ì–û –û–ü–õ–ê–ß–ï–ù–û –ó–ê –°–ï–ì–û–î–ù–Ø: `{escape_markdown_v2(f'{total_paid_amount:.2f}')} ‚Ç¥`*")

    final_report_text = "".join(report_parts)
    
    await message.answer(final_report_text, parse_mode="MarkdownV2")


@router.callback_query(F.data.startswith("view_invoice_details_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def view_invoice_details(callback: CallbackQuery, state: FSMContext, db_pool):
    order_id = int(callback.data.split("view_invoice_details_")[1])
    
    invoice = await get_single_unpaid_invoice_details(db_pool, order_id)

    if invoice:
        await state.update_data(current_invoice_id=order_id)
        details_text_raw = format_unpaid_invoice_details(invoice) # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        # --- –ù–û–í–û–ï: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ MarkdownV2 ---
        # –≠—Ç–æ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±—É–∫–≤–∞–ª—å–Ω–æ.
        details_text_safe = f"```\n{details_text_raw}\n```" 
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

        keyboard = build_invoice_details_keyboard(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å parse_mode="MarkdownV2", –Ω–æ —Ç–µ–∫—Å—Ç —É–∂–µ –≤ "inline code"
        await callback.message.edit_text(details_text_safe, reply_markup=keyboard, parse_mode="MarkdownV2")
    else:
        await callback.answer("–ù–∞–∫–ª–∞–¥–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
    
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_payment_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def handle_confirm_payment(callback: CallbackQuery, state: FSMContext, db_pool):
    order_id = int(callback.data.split("confirm_payment_")[1])
    
    success = await confirm_payment_in_db(db_pool, order_id)
    if success:
        await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        await show_client_payments_report(callback.message, state, db_pool)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.", show_alert=True)
    await callback.answer()

@router.callback_query(F.data.startswith("partial_payment_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def handle_partial_payment_input(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("partial_payment_")[1])
    await state.update_data(order_to_partial_pay=order_id)
    
    await callback.message.edit_text(escape_markdown_v2("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã:"), parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.entering_partial_payment_amount)
    await callback.answer()

@router.message(StateFilter(OrderFSM.entering_partial_payment_amount))
async def process_partial_payment_amount(message: Message, state: FSMContext, db_pool):
    amount_text = message.text.strip()
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨: –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        partial_amount = Decimal(amount_text.replace(',', '.'))
        if partial_amount < 0:
            await message.answer(escape_markdown_v2("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"), parse_mode="MarkdownV2")
            return
    except Exception: # –õ–æ–≤–∏–º –±–æ–ª–µ–µ –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ Decimal –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å InvalidOperation
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50):"), parse_mode="MarkdownV2")
        return

    data = await state.get_data()
    order_id = data.get("order_to_partial_pay")

    if not order_id:
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã."), parse_mode="MarkdownV2")
        await state.clear()
        return

    success = await update_partial_payment_in_db(db_pool, order_id, partial_amount)
    if success:
        await message.answer(escape_markdown_v2(f"‚úÖ –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ `{partial_amount:.2f}` –≥—Ä–Ω –¥–ª—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞."), parse_mode="MarkdownV2")
        await show_client_payments_report(message, state, db_pool)
    else:
        await message.answer(escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã."), parse_mode="MarkdownV2")
        await state.clear()
    await state.clear()

@router.callback_query(F.data.startswith("reverse_payment_"), StateFilter(OrderFSM.viewing_unpaid_invoices_list))
async def handle_reverse_payment(callback: CallbackQuery, state: FSMContext, db_pool):
    order_id = int(callback.data.split("reverse_payment_")[1])
    
    success = await reverse_payment_in_db(db_pool, order_id)
    if success:
        await callback.answer("‚Ü©Ô∏è –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞/—Å–±—Ä–æ—à–µ–Ω–∞.", show_alert=True)
        await show_client_payments_report(callback.message, state, db_pool)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã.", show_alert=True)
    await callback.answer()

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_from_payments(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(escape_markdown_v2("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."), parse_mode="MarkdownV2")
    await callback.answer()