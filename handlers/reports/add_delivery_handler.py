# handlers/reports/add_delivery_handler.py

import logging
import re
from datetime import date, datetime, timedelta
from decimal import Decimal
from typing import List, Dict, Any, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

from states.order import OrderFSM # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
# –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –ò–ó db_operations
from db_operations.product_operations import get_all_products_for_selection, ProductItem, get_product_by_id
from db_operations.supplier_operations import (
    find_suppliers_by_name, Supplier, create_supplier_invoice,
    record_incoming_delivery as record_incoming_delivery_line, # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ record_incoming_delivery_line
    get_supplier_by_id
)

router = Router()
logger = logging.getLogger(__name__)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
MAX_RESULTS_TO_SHOW = 10 # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
DEFAULT_DUE_DATE_DAYS = 7 # –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (7 –¥–Ω–µ–π)

def escape_markdown_v2(text: str) -> str:
    """Escapes all special characters for MarkdownV2."""
    if text is None:
        return ""
    text = text.replace('\\', '\\\\')
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    escaped_text_parts = []
    for char in text:
        if char in special_chars:
            escaped_text_parts.append('\\' + char)
        else:
            escaped_text_parts.append(char)
    return "".join(escaped_text_parts)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def build_date_selection_keyboard(current_date: date) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—è +/- 7 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π."""
    buttons = []
    row = []
    for i in range(-7, 8):
        day = current_date + timedelta(days=i)
        row.append(InlineKeyboardButton(text=day.strftime('%d.%m'), callback_data=f"select_inv_date_{day.isoformat()}"))
        if len(row) == 5:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_supplier_invoice")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_supplier_selection_keyboard(suppliers: List[Supplier]) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    buttons = []
    for supplier in suppliers[:MAX_RESULTS_TO_SHOW]:
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(supplier.name),
                callback_data=f"select_supplier_for_new_inv_{supplier.supplier_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_supplier_invoice")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_products_keyboard(products: List[ProductItem]) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    buttons = []
    for product in products:
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(product.name),
                callback_data=f"select_product_for_new_inv_item_{product.product_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_supplier_invoice")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_add_supplier_invoice_item_menu_keyboard(has_items: bool) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_new_supplier_invoice_item")],
    ]
    if has_items:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é", callback_data="finish_new_supplier_invoice_creation")
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_new_supplier_invoice")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_confirm_new_supplier_invoice_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å", callback_data="confirm_new_supplier_invoice_data")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_new_supplier_invoice_data")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_new_supplier_invoice")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–≤–æ–¥–∫–∏ ---

def get_supplier_invoice_summary_text(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—è –¥–ª—è MarkdownV2."""
    invoice_date_str = data.get('new_supplier_invoice_date', date.today()).strftime('%Y-%m-%d')
    supplier_name_escaped = escape_markdown_v2(data.get('new_supplier_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
    invoice_number_escaped = escape_markdown_v2(data.get('new_supplier_invoice_number', '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞'))
    due_date_str = data.get('new_supplier_invoice_due_date', '–ù–µ —É–∫–∞–∑–∞–Ω').strftime('%Y-%m-%d') if data.get('new_supplier_invoice_due_date') else '–ù–µ —É–∫–∞–∑–∞–Ω'
    
    items = data.get('new_supplier_invoice_items', [])
    
    summary_parts = [
        "üßæ *–°–≤–æ–¥–∫–∞ –ø–æ –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:*\n",
        f"üìÖ –î–∞—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: `{invoice_date_str}`\n",
        f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: *{supplier_name_escaped}*\n",
        f"üìù –ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π: *{invoice_number_escaped}*\n",
        f"üóìÔ∏è –°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: `{due_date_str}`\n",
        "\n*–ü–æ–∑–∏—Ü–∏–∏:*\n"
    ]
    
    total_invoice_amount = Decimal('0.00')
    if not items:
        summary_parts.append(escape_markdown_v2("   (–ü–æ–∑–∏—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)"))
    else:
        for i, item in enumerate(items):
            item_total = item['quantity'] * item['unit_cost']
            total_invoice_amount += item_total
            
            product_name_escaped = escape_markdown_v2(item['product_name'])

            summary_parts.append(
                f"   *{i+1}\\. {product_name_escaped}*\n"
                f"      –ö–æ–ª\\-–≤–æ: `{item['quantity']}` –µ–¥\\. –ø–æ `{item['unit_cost']:.2f} ‚Ç¥`\n"
                f"      –°—É–º–º–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: `{item_total:.2f} ‚Ç¥`\n"
            )
    
    summary_parts.append(f"\n*–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π: `{total_invoice_amount:.2f} ‚Ç¥`*")
    
    return "".join(summary_parts)


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è/–Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ ---

@router.message(Command("add_delivery"))
async def cmd_add_delivery(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    await state.clear()
    await state.update_data(new_supplier_invoice_items=[]) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    
    current_date = date.today()
    keyboard = build_date_selection_keyboard(current_date)
    await message.answer(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_date)

@router.callback_query(F.data.startswith("select_inv_date_"), OrderFSM.waiting_for_new_supplier_invoice_date)
async def process_new_supplier_invoice_date_selection(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    await callback.answer()
    selected_date_str = callback.data.split("_")[3]
    invoice_date = date.fromisoformat(selected_date_str)
    await state.update_data(new_supplier_invoice_date=invoice_date)

    await callback.message.edit_text(escape_markdown_v2("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:"), parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_supplier)

@router.message(StateFilter(OrderFSM.waiting_for_new_supplier_invoice_supplier))
async def process_new_supplier_invoice_supplier_input(message: Message, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    supplier_name_query = message.text.strip()
    suppliers = await find_suppliers_by_name(db_pool, supplier_name_query)

    if suppliers:
        if len(suppliers) == 1:
            supplier = suppliers[0]
            await state.update_data(new_supplier_id=supplier.supplier_id, new_supplier_name=supplier.name)
            await message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: *{escape_markdown_v2(supplier.name)}*", parse_mode="MarkdownV2")
            await message.answer(escape_markdown_v2("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:"), parse_mode="MarkdownV2")
            await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_number)
        elif 1 < len(suppliers) <= MAX_RESULTS_TO_SHOW:
            keyboard = build_supplier_selection_keyboard(suppliers)
            await message.answer(escape_markdown_v2("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ:"), reply_markup=keyboard, parse_mode="MarkdownV2")
        else:
            await message.answer(escape_markdown_v2(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ ({len(suppliers)}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."), parse_mode="MarkdownV2")
    else:
        await message.answer("–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(StateFilter(OrderFSM.waiting_for_new_supplier_invoice_supplier), F.data.startswith("select_supplier_for_new_inv_"))
async def select_new_supplier_invoice_supplier(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    await callback.answer()
    supplier_id = int(callback.data.split("_")[4])
    supplier = await get_supplier_by_id(db_pool, supplier_id)
    
    if supplier:
        await state.update_data(new_supplier_id=supplier.supplier_id, new_supplier_name=supplier.name)
        await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: *{escape_markdown_v2(supplier.name)}*", parse_mode="MarkdownV2", reply_markup=None)
        await callback.message.answer(escape_markdown_v2("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:"), parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_number)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@router.message(StateFilter(OrderFSM.waiting_for_new_supplier_invoice_number))
async def process_new_supplier_invoice_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    invoice_number = message.text.strip()
    if not invoice_number:
        await message.answer(escape_markdown_v2("–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:"), parse_mode="MarkdownV2")
        return
    await state.update_data(new_supplier_invoice_number=invoice_number)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    invoice_date = (await state.get_data()).get('new_supplier_invoice_date', date.today())
    default_due_date = invoice_date + timedelta(days=DEFAULT_DUE_DATE_DAYS)

    await message.answer(
        escape_markdown_v2(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –Ω–∞–∫–ª–∞–¥–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, `{default_due_date.strftime('%Y-%m-%d')}` –¥–ª—è {DEFAULT_DUE_DATE_DAYS} –¥–Ω–µ–π, –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –±–µ–∑ —Å—Ä–æ–∫–∞):"),
        parse_mode="MarkdownV2"
    )
    await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_due_date)

@router.message(StateFilter(OrderFSM.waiting_for_new_supplier_invoice_due_date))
async def process_new_supplier_invoice_due_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    due_date_str = message.text.strip()
    new_due_date = None
    if due_date_str.lower() != '–Ω–µ—Ç':
        try:
            new_due_date = date.fromisoformat(due_date_str)
            if new_due_date < date.today():
                await message.answer(escape_markdown_v2("–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"), parse_mode="MarkdownV2")
                return
        except ValueError:
            await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '–Ω–µ—Ç':"), parse_mode="MarkdownV2")
            return
    
    await state.update_data(new_supplier_invoice_due_date=new_due_date)
    await show_add_supplier_invoice_items_menu(message, state) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∑–∏—Ü–∏–π
    await state.set_state(OrderFSM.adding_new_supplier_invoice_items)

async def show_add_supplier_invoice_items_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    data = await state.get_data()
    items = data.get('new_supplier_invoice_items', [])
    
    summary_text = get_supplier_invoice_summary_text(data)
    keyboard = build_add_supplier_invoice_item_menu_keyboard(bool(items))
    
    try:
        await message.edit_text(summary_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
        await message.answer(summary_text, reply_markup=keyboard, parse_mode="MarkdownV2")

@router.callback_query(F.data == "add_new_supplier_invoice_item", StateFilter(OrderFSM.adding_new_supplier_invoice_items))
async def add_new_supplier_invoice_item_start(callback: CallbackQuery, state: FSMContext, db_pool):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–∞–∫–ª–∞–¥–Ω—É—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    await callback.answer()
    products = await get_all_products_for_selection(db_pool)
    if not products:
        await callback.message.edit_text(escape_markdown_v2("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."), parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.adding_new_supplier_invoice_items)
        return

    keyboard = build_products_keyboard(products)
    await callback.message.edit_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_product_selection)

@router.callback_query(F.data.startswith("select_product_for_new_inv_item_"), StateFilter(OrderFSM.waiting_for_new_supplier_invoice_product_selection))
async def process_new_supplier_invoice_product_selection(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    await callback.answer()
    product_id = int(callback.data.split("_")[6])
    product_info = await get_product_by_id(db_pool, product_id)
    
    if product_info:
        await state.update_data(current_new_inv_item_product_id=product_id, current_new_inv_item_product_name=product_info.name)
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è *{escape_markdown_v2(product_info.name)}* \\(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\\):",
            parse_mode="MarkdownV2"
        )
        await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_quantity)
    else:
        await callback.message.edit_text(escape_markdown_v2("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞."), parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.adding_new_supplier_invoice_items) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π

@router.message(StateFilter(OrderFSM.waiting_for_new_supplier_invoice_quantity))
async def process_new_supplier_invoice_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer(escape_markdown_v2("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return
        await state.update_data(current_new_inv_item_quantity=quantity)
        
        product_name = (await state.get_data()).get('current_new_inv_item_product_name', '–ø—Ä–æ–¥—É–∫—Ç–∞')
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É *{escape_markdown_v2(product_name)}* \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 100\\.50\\):", parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.waiting_for_new_supplier_invoice_unit_cost)
    except ValueError:
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."), parse_mode="MarkdownV2")

@router.message(StateFilter(OrderFSM.waiting_for_new_supplier_invoice_unit_cost))
async def process_new_supplier_invoice_unit_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é."""
    try:
        unit_cost = Decimal(message.text.strip())
        if unit_cost <= 0:
            await message.answer(escape_markdown_v2("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return
        
        data = await state.get_data()
        items = data.get('new_supplier_invoice_items', [])
        
        new_item = {
            'product_id': data['current_new_inv_item_product_id'], 
            'product_name': data['current_new_inv_item_product_name'],
            'quantity': data['current_new_inv_item_quantity'], 
            'unit_cost': unit_cost
        }
        items.append(new_item)
        await state.update_data(new_supplier_invoice_items=items)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        await state.update_data(current_new_inv_item_product_id=None, current_new_inv_item_product_name=None, current_new_inv_item_quantity=None)

        await message.answer(escape_markdown_v2("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞."), parse_mode="MarkdownV2")
        await show_add_supplier_invoice_items_menu(message, state)
        await state.set_state(OrderFSM.adding_new_supplier_invoice_items)

    except ValueError:
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50)."), parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –¥–ª—è –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π: {e}", exc_info=True)
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."), parse_mode="MarkdownV2")

@router.callback_query(F.data == "finish_new_supplier_invoice_creation", StateFilter(OrderFSM.adding_new_supplier_invoice_items))
async def finish_new_supplier_invoice_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    await callback.answer()
    data = await state.get_data()
    items = data.get('new_supplier_invoice_items', [])
    if not items:
        await callback.answer(escape_markdown_v2("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å: –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π."), show_alert=True)
        return
    
    summary_text = get_supplier_invoice_summary_text(data)
    keyboard = build_confirm_new_supplier_invoice_keyboard()
    await callback.message.edit_text(summary_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.confirm_new_supplier_invoice_data)

@router.callback_query(F.data == "confirm_new_supplier_invoice_data", StateFilter(OrderFSM.confirm_new_supplier_invoice_data))
async def confirm_and_create_supplier_invoice(callback: CallbackQuery, state: FSMContext, db_pool):
    await callback.answer()
    data = await state.get_data()
    
    invoice_date = data['new_supplier_invoice_date']
    supplier_id = data['new_supplier_id']
    invoice_number = data['new_supplier_invoice_number']
    due_date = data['new_supplier_invoice_due_date']
    items = data.get('new_supplier_invoice_items', [])

    if not items:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
        await callback.message.edit_text(escape_markdown_v2("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å: –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π."), parse_mode="MarkdownV2")
        await state.clear()
        return

    total_amount = sum(item['quantity'] * item['unit_cost'] for item in items)
    
    supplier_invoice_id = await create_supplier_invoice(
        db_pool,
        supplier_id,
        invoice_number,
        invoice_date,
        total_amount,
        due_date,
        description="–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞"
    )

    if supplier_invoice_id:
        success_count = 0
        failed_count = 0
        for item in items:
            inserted_id = await record_incoming_delivery_line(
                db_pool,
                delivery_date=invoice_date,
                supplier_id=supplier_id,
                product_id=item['product_id'],
                quantity=item['quantity'],
                unit_cost=item['unit_cost'],
                supplier_invoice_id=supplier_invoice_id
            )
            if inserted_id:
                success_count += 1
            else:
                failed_count += 1
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {item['product_id']}.")
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º ---
        final_message_raw = f"‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ *{invoice_number}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: `{success_count}`. –û—à–∏–±–æ–∫: `{failed_count}`."
        if failed_count > 0:
            final_message_raw += "\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫."
        
        await callback.message.edit_text(escape_markdown_v2(final_message_raw), parse_mode="MarkdownV2") # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    else:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
        await callback.message.edit_text(escape_markdown_v2("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."), parse_mode="MarkdownV2")
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "edit_new_supplier_invoice_data", StateFilter(OrderFSM.confirm_new_supplier_invoice_data))
async def edit_new_supplier_invoice_data(callback: CallbackQuery, state: FSMContext, db_pool):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    await callback.answer()
    await show_add_supplier_invoice_items_menu(callback.message, state)
    await state.set_state(OrderFSM.adding_new_supplier_invoice_items)

@router.callback_query(F.data == "cancel_new_supplier_invoice")
async def cancel_new_supplier_invoice(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(escape_markdown_v2("–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."), parse_mode="MarkdownV2")
    await callback.answer()


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (return_in, adjustment_in/out) --- (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –∫—Ä–æ–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è FSM States)
# ... (process_return_quantity, process_adjustment_description, confirm_and_record_adjustment, edit_adjustment_data, cancel_adjustment) ...

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (return_out) --- (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, –∫—Ä–æ–º–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è FSM States)
# ... (process_supplier_name_input, select_supplier_for_return_from_list, select_another_supplier_return, process_incoming_delivery_input, process_incoming_delivery_selection, show_products_for_return_to_supplier_selection, process_return_to_supplier_product, confirm_adj_product_to_supplier, select_another_adj_product_to_supplier, process_return_to_supplier_quantity, process_return_to_supplier_description, confirm_and_record_return_to_supplier) ...