# handlers/reports/add_delivery_handler.py

import logging
import re
from datetime import date, datetime, timedelta
from decimal import Decimal
from typing import List, Dict, Any, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ states.order
from states.order import OrderFSM

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
from db_operations.supplier_operations import (
    get_all_suppliers,
    record_incoming_delivery,
    SupplierItem,
)
# –ò–ú–ü–û–†–¢: ProductItem —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ product_operations
from db_operations.product_operations import get_all_products_for_selection, ProductItem


router = Router()
logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω
    –ø—É—Ç–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –ø–æ –æ—á–µ—Ä–µ–¥–∏.
    """
    if text is None:
        logger.error("escape_markdown_v2 received NoneType text. Returning empty string.")
        return ""

    # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    # —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–ª—ç—à–µ–π.
    text = text.replace('\\', '\\\\')

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']

    escaped_text_parts = []
    for char in text:
        if char in special_chars:
            escaped_text_parts.append('\\' + char)
        else:
            escaped_text_parts.append(char)
    return "".join(escaped_text_parts)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def build_date_selection_keyboard(current_date: date) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—è +/- 7 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π.
    """
    buttons = []
    row = []
    for i in range(-7, 8): # –û—Ç -7 –¥–æ +7 –¥–Ω–µ–π
        day = current_date + timedelta(days=i)
        row.append(InlineKeyboardButton(text=day.strftime('%d.%m'), callback_data=f"select_delivery_date_{day.isoformat()}"))
        if len(row) == 5: # 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
            buttons.append(row)
            row = []
    if row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cancel_add_delivery")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_suppliers_keyboard(suppliers: List[SupplierItem]) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    buttons = []
    for supplier in suppliers:
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(supplier.name), # –ò–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
                callback_data=f"select_supplier_{supplier.supplier_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_delivery")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_products_keyboard(products: List[ProductItem]) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    buttons = []
    for product in products:
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(product.name), # –ò–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
                callback_data=f"select_product_for_delivery_{product.product_id}" # –ò–∑–º–µ–Ω–µ–Ω–æ callback_data
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_delivery")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_add_delivery_item_menu_keyboard(has_items: bool) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.
    """
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_delivery_item")],
    ]
    if has_items:
        buttons.append([
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="edit_delivery_item"),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="delete_delivery_item")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ", callback_data="finish_delivery_creation")
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_delivery")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_edit_delivery_item_keyboard(item_index: int) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.
    """
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"edit_delivery_item_qty_{item_index}")],
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–î–ê–õ–ï–ù–ê –õ–ò–®–ù–Ø–Ø –°–ö–û–ë–ö–ê –≤ callback_data
        [InlineKeyboardButton(text="üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –µ–¥.", callback_data=f"edit_delivery_item_cost_{item_index}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∑–∏—Ü–∏—è–º", callback_data="back_to_adding_delivery_items")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_delivery_items_list_keyboard(items: List[Dict[str, Any]], action_prefix: str) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è.
    `action_prefix` –º–æ–∂–µ—Ç –±—ã—Ç—å "edit_selected_delivery_item_" –∏–ª–∏ "delete_selected_delivery_item_".
    """
    buttons = []
    for i, item in enumerate(items):
        # –í–µ—Å—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
        button_text = escape_markdown_v2(f"{i+1}. {item['product_name']} - {item['quantity']} –µ–¥. –ø–æ {item['unit_cost']:.2f} ‚Ç¥")
        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"{action_prefix}{i}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∑–∏—Ü–∏—è–º", callback_data="back_to_adding_delivery_items")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_confirm_delivery_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_delivery_data")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_delivery_data")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_delivery")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–≤–æ–¥–∫–∏ ---

def get_delivery_summary_text(data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ —Ç–µ–∫—É—â–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏, –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—è –¥–ª—è MarkdownV2.
    """
    delivery_date_str = data['delivery_date'].strftime('%Y-%m-%d')
    supplier_name_escaped = escape_markdown_v2(data.get('supplier_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
    items = data.get('delivery_items', [])
    
    summary_parts = [
        "üöö *–°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é:*\n",
        f"üìÖ –î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: `{delivery_date_str}`\n",
        f"üë§ –ü–æ—Å—Ç–∞–≤—â–∏–∫: *{supplier_name_escaped}*\n",
        "\n*–ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:*\n"
    ]
    
    total_delivery_amount = Decimal('0.00')
    if not items:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å–∫–æ–±–∫–∏, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        summary_parts.append(escape_markdown_v2("   (–ü–æ–∑–∏—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)"))
    else:
        for i, item in enumerate(items):
            item_total = item['quantity'] * item['unit_cost']
            total_delivery_amount += item_total
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞
            product_name_escaped = escape_markdown_v2(item['product_name'])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É, —è–≤–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã,
            # –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏.
            summary_parts.append(
                f"   *{i+1}\\. {product_name_escaped}*\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º '.' –≤ '1.'
                f"      –ö–æ–ª\\-–≤–æ: `{item['quantity']}` –µ–¥\\. –ø–æ `{item['unit_cost']:.2f} ‚Ç¥`\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º '-' –≤ '–ö–æ–ª-–≤–æ' –∏ '.' –≤ '–µ–¥.'
                f"      –°—É–º–º–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: `{item_total:.2f} ‚Ç¥`\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º '.' –≤ '–µ–¥.'
            )
    
    summary_parts.append(f"\n*–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: `{total_delivery_amount:.2f} ‚Ç¥`*")
    
    return "".join(summary_parts)


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è ---

@router.message(Command("add_delivery"))
async def cmd_add_delivery(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    await state.clear() # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    await state.update_data(delivery_items=[]) 
    
    current_date = date.today()
    keyboard = build_date_selection_keyboard(current_date)
    await message.answer(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_delivery_date)

@router.callback_query(F.data.startswith("select_delivery_date_"), OrderFSM.waiting_for_delivery_date)
async def process_delivery_date_selection(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
    selected_date_str = callback.data.split("_")[3]
    delivery_date = date.fromisoformat(selected_date_str)
    await state.update_data(delivery_date=delivery_date)

    suppliers = await get_all_suppliers(db_pool)
    if not suppliers:
        await callback.message.edit_text(escape_markdown_v2("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."), parse_mode="MarkdownV2")
        await state.clear()
        return

    keyboard = build_suppliers_keyboard(suppliers)
    await callback.message.edit_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_supplier_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("select_supplier_"), OrderFSM.waiting_for_supplier_selection)
async def process_supplier_selection(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–∑–∏—Ü–∏–π."""
    supplier_id = int(callback.data.split("_")[2])
    await state.update_data(supplier_id=supplier_id)

    suppliers = await get_all_suppliers(db_pool)
    selected_supplier = next((s for s in suppliers if s.supplier_id == supplier_id), None)
    if selected_supplier:
        await state.update_data(supplier_name=selected_supplier.name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
    await show_add_delivery_items_menu(callback.message, state) # –ü–µ—Ä–µ–¥–∞–µ–º message_object
    await callback.answer()


@router.callback_query(F.data == "add_delivery_item", OrderFSM.adding_delivery_items)
async def add_delivery_item_start(callback: CallbackQuery, state: FSMContext, db_pool):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ."""
    products = await get_all_products_for_selection(db_pool)
    if not products:
        await callback.message.edit_text(escape_markdown_v2("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."), parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.adding_delivery_items) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π
        await callback.answer()
        return

    keyboard = build_products_keyboard(products)
    await callback.message.edit_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_delivery_product_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("select_product_for_delivery_"), OrderFSM.waiting_for_delivery_product_selection)
async def process_delivery_product_selection(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    product_id = int(callback.data.split("_")[4]) # split("_")[4] –∏–∑-–∑–∞ "select_product_for_delivery_"
    await state.update_data(current_product_id=product_id)

    products = await get_all_products_for_selection(db_pool)
    selected_product = next((p for p in products if p.product_id == product_id), None)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞, —Ç.–∫. –æ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ
    product_name_escaped = escape_markdown_v2(selected_product.name) if selected_product else escape_markdown_v2("–ø—Ä–æ–¥—É–∫—Ç–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ process_delivery_quantity –∏ process_delivery_unit_cost
    await state.update_data(current_product_name=selected_product.name if selected_product else None)


    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —è–≤–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Å–∫–æ–±–∫–∏
    final_message_text = f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è *{product_name_escaped}* \\(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\\):"
    
    logger.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ: {final_message_text}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    logger.info(f"DEBUG: State data at end of process_delivery_product_selection: {await state.get_data()}") # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –ó–¥–µ—Å—å final_message_text —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫—É
    await callback.message.edit_text(final_message_text, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.waiting_for_delivery_quantity)
    await callback.answer()

@router.message(OrderFSM.waiting_for_delivery_quantity)
async def process_delivery_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
            await message.answer(escape_markdown_v2("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return
        await state.update_data(current_quantity=quantity)
        
        data = await state.get_data()
        
        # --- DEBUGGING START ---
        logger.info(f"DEBUG: In process_delivery_quantity, full state data: {data}")
        product_name = data.get('current_product_name', '–ø—Ä–æ–¥—É–∫—Ç–∞')
        logger.info(f"DEBUG: In process_delivery_quantity, product_name: {product_name} (type: {type(product_name)})")
        # --- DEBUGGING END ---

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∞ —Å–∫–æ–±–∫–∏ –∏ —Ç–æ—á–∫—É —è–≤–Ω–æ –≤ —Å—Ç—Ä–æ–∫–µ
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É *{escape_markdown_v2(product_name)}* \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, 100\\.50\\):", parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.waiting_for_delivery_unit_cost)
    except ValueError:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."), parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {e}", exc_info=True)
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."), parse_mode="MarkdownV2")

@router.message(OrderFSM.waiting_for_delivery_unit_cost)
async def process_delivery_unit_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º delivery_items –∑–¥–µ—Å—å, —á—Ç–æ–±—ã Pylance –Ω–µ –≤—ã–¥–∞–≤–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    delivery_items: List[Dict[str, Any]] = [] 
    try:
        unit_cost = Decimal(message.text.strip())
        if unit_cost <= 0:
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
            await message.answer(escape_markdown_v2("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return
        
        data = await state.get_data()
        
        # Safely get current_product_name, providing a default if it's missing
        product_name_for_item = data.get('current_product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç') 
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        new_item = {
            'product_id': data['current_product_id'], 
            'product_name': product_name_for_item, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–º—è
            'quantity': data['current_quantity'], 
            'unit_cost': unit_cost
        }
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º delivery_items –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        delivery_items = data.get('delivery_items', []) 
        delivery_items.append(new_item)
        await state.update_data(delivery_items=delivery_items)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        await state.update_data(current_product_id=None, current_product_name=None, current_quantity=None)

        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞."), parse_mode="MarkdownV2")
        await show_add_delivery_items_menu(message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π

    except ValueError:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É –∏ —Å–∫–æ–±–∫–∏, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50)."), parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {e}", exc_info=True)
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."), parse_mode="MarkdownV2")


@router.callback_query(F.data == "back_to_adding_delivery_items")
async def back_to_adding_delivery_items_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    await callback.answer()
    await show_add_delivery_items_menu(callback.message, state)


@router.callback_query(F.data == "edit_delivery_item", OrderFSM.adding_delivery_items)
async def edit_delivery_item_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    data = await state.get_data()
    items = data.get('delivery_items', [])
    if not items:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await callback.answer(escape_markdown_v2("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."), show_alert=True)
        return
    
    keyboard = build_delivery_items_list_keyboard(items, "edit_selected_delivery_item_")
    await callback.message.edit_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.editing_delivery_item_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("edit_selected_delivery_item_"), StateFilter(OrderFSM.editing_delivery_item_selection))
async def select_item_to_edit_action(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–∫–æ–ª-–≤–æ/—Ü–µ–Ω–∞)."""
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω–µ–Ω –∏–Ω–¥–µ–∫—Å —Å [3] –Ω–∞ [4]
    item_index = int(callback.data.split("_")[4])
    await state.update_data(editing_item_index=item_index) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏
    
    data = await state.get_data()
    item = data['delivery_items'][item_index]
    
    keyboard = build_edit_delivery_item_keyboard(item_index)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫–ª—é—á–µ–Ω—ã —á–∏—Å–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏–∏: *{escape_markdown_v2(item['product_name'])}* \\(–ö–æ–ª\\-–≤–æ: `{item['quantity']}`, –¶–µ–Ω–∞: `{item['unit_cost']:.2f} ‚Ç¥`\\)\\?",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    await state.set_state(OrderFSM.editing_delivery_item_action)
    await callback.answer()

@router.callback_query(F.data.startswith("edit_delivery_item_qty_"), OrderFSM.editing_delivery_item_action)
async def start_edit_delivery_quantity(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    item_index = int(callback.data.split("_")[4])
    data = await state.get_data()
    item = data['delivery_items'][item_index]
    
    await state.update_data(editing_item_index=item_index)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫–ª—é—á–µ–Ω—ã —á–∏—Å–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è *{escape_markdown_v2(item['product_name'])}* \\(—Ç–µ–∫—É—â–µ–µ: `{item['quantity']}`\\):", parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.entering_new_delivery_quantity)
    await callback.answer()

@router.message(OrderFSM.entering_new_delivery_quantity)
async def process_new_delivery_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    try:
        new_quantity = int(message.text.strip())
        if new_quantity <= 0:
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
            await message.answer(escape_markdown_v2("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return
        await state.update_data(current_quantity=new_quantity) # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º current_quantity
        
        data = await state.get_data()
        item_index = data['editing_item_index']
        delivery_items = data['delivery_items']
        
        delivery_items[item_index]['quantity'] = new_quantity
        await state.update_data(delivery_items=delivery_items)
        
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."), parse_mode="MarkdownV2")
        await show_add_delivery_items_menu(message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π

    except ValueError:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."), parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {e}", exc_info=True)
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."), parse_mode="MarkdownV2")


@router.callback_query(F.data.startswith("edit_delivery_item_cost_"), OrderFSM.editing_delivery_item_action)
async def start_edit_delivery_unit_cost(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    # –ó–¥–µ—Å—å callback.data –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–∏–¥ "edit_delivery_item_cost_X"
    # split("_") –¥–∞—Å—Ç ["edit", "delivery", "item", "cost", "X"]
    # –¢–∞–∫ —á—Ç–æ [4] –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
    item_index = int(callback.data.split("_")[4])
    data = await state.get_data()
    item = data['delivery_items'][item_index]
    
    await state.update_data(editing_item_index=item_index)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫–ª—é—á–µ–Ω—ã —á–∏—Å–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è *{escape_markdown_v2(item['product_name'])}* \\(—Ç–µ–∫—É—â–∞—è: `{item['unit_cost']:.2f} ‚Ç¥`\\):", parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.entering_new_delivery_unit_cost)
    await callback.answer()

@router.message(OrderFSM.entering_new_delivery_unit_cost)
async def process_new_delivery_unit_cost(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    try:
        new_unit_cost = Decimal(message.text.strip())
        if new_unit_cost <= 0:
            # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
            await message.answer(escape_markdown_v2("–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return
        
        data = await state.get_data()
        item_index = data['editing_item_index']
        delivery_items = data['delivery_items']
        
        delivery_items[item_index]['unit_cost'] = new_unit_cost
        await state.update_data(delivery_items=delivery_items)
        
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –æ–±–Ω–æ–≤–ª–µ–Ω–∞."), parse_mode="MarkdownV2")
        await show_add_delivery_items_menu(message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π

    except ValueError:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É –∏ —Å–∫–æ–±–∫–∏, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50)."), parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è: {e}", exc_info=True)
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await message.answer(escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."), parse_mode="MarkdownV2")


@router.callback_query(F.data == "delete_delivery_item", OrderFSM.adding_delivery_items)
async def delete_delivery_item_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    items = data.get('delivery_items', [])
    if not items:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await callback.answer(escape_markdown_v2("–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."), show_alert=True)
        return
    
    keyboard = build_delivery_items_list_keyboard(items, "delete_selected_delivery_item_")
    await callback.message.edit_text(escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"), reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.deleting_item)
    await callback.answer()

@router.callback_query(F.data.startswith("delete_selected_delivery_item_"), StateFilter(OrderFSM.deleting_item))
async def confirm_delete_delivery_item(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞."""
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–º–µ–Ω–µ–Ω –∏–Ω–¥–µ–∫—Å —Å [3] –Ω–∞ [4]
    item_index = int(callback.data.split("_")[4])
    data = await state.get_data()
    delivery_items = data.get('delivery_items', [])
    
    if 0 <= item_index < len(delivery_items):
        deleted_item = delivery_items.pop(item_index)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.answer(escape_markdown_v2(f"–ü–æ–∑–∏—Ü–∏—è '{deleted_item['product_name']}' —É–¥–∞–ª–µ–Ω–∞."), show_alert=True)
        await state.update_data(delivery_items=delivery_items) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    else:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await callback.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏."), show_alert=True)
    
    await show_add_delivery_items_menu(callback.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π


@router.callback_query(F.data == "finish_delivery_creation", OrderFSM.adding_delivery_items)
async def finish_delivery_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    data = await state.get_data()
    items = data.get('delivery_items', [])
    if not items:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await callback.answer(escape_markdown_v2("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å: –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."), show_alert=True)
        return
    
    summary_text = get_delivery_summary_text(data)
    keyboard = build_confirm_delivery_keyboard()
    # –ó–¥–µ—Å—å summary_text —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–µ–≥–æ escape_markdown_v2
    await callback.message.edit_text(summary_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.confirm_delivery_data)
    await callback.answer()


@router.callback_query(F.data == "confirm_delivery_data", OrderFSM.confirm_delivery_data)
async def confirm_and_record_delivery(callback: CallbackQuery, state: FSMContext, db_pool):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ë–î."""
    data = await state.get_data()
    delivery_date = data['delivery_date']
    supplier_id = data['supplier_id']
    delivery_items = data.get('delivery_items', [])

    if not delivery_items:
        # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
        await callback.message.edit_text(escape_markdown_v2("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å: –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏."), parse_mode="MarkdownV2")
        await state.clear()
        await callback.answer()
        return

    success_count = 0
    failed_count = 0
    
    for item in delivery_items:
        product_id = item['product_id']
        quantity = item['quantity']
        unit_cost = item['unit_cost']

        inserted_id = await record_incoming_delivery( # –í—ã–∑—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
            db_pool,
            delivery_date,
            supplier_id,
            product_id,
            quantity,
            unit_cost
        )

        if inserted_id:
            success_count += 1
        else:
            failed_count += 1
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id}.")
    
    final_message = f"‚úÖ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ\\. –ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: `{success_count}`\\. –û—à–∏–±–æ–∫: `{failed_count}`\\."
    if failed_count > 0:
        final_message += escape_markdown_v2("\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫.") # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
    
    # final_message —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
    await callback.message.edit_text(final_message, parse_mode="MarkdownV2")
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_add_delivery") # <--- –£–±—Ä–∞–ª StateFilter, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def cancel_add_delivery(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è."""
    await state.clear()
    # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–æ—á–∫—É, –ø–æ—ç—Ç–æ–º—É –µ–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
    await callback.message.edit_text(escape_markdown_v2("–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."), parse_mode="MarkdownV2")
    await callback.answer()

@router.callback_query(F.data == "edit_delivery_data", OrderFSM.confirm_delivery_data)
async def edit_delivery_data(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    await callback.answer()
    await show_add_delivery_items_menu(callback.message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π ---
async def show_add_delivery_items_menu(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.
    """
    data = await state.get_data()
    items = data.get('delivery_items', [])
    
    summary_text = get_delivery_summary_text(data)
    keyboard = build_add_delivery_item_menu_keyboard(bool(items))
    
    try:
        # summary_text —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
        await message.edit_text(summary_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –ø–æ–∑–∏—Ü–∏–π: {e}")
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # summary_text —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω.
        await message.answer(summary_text, reply_markup=keyboard, parse_mode="MarkdownV2")
    
    await state.set_state(OrderFSM.adding_delivery_items)