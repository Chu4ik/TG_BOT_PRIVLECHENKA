import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä—è–º–∞—è
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ OrderFSM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from states.order import OrderFSM 
from db_operations.db import get_unconfirmed_orders, confirm_order_in_db, cancel_order_in_db, confirm_all_orders_in_db, cancel_all_orders_in_db # –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ë–î
from datetime import date
import re
from keyboards.inline_keyboards import create_confirm_report_keyboard

router = Router()
logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """Escapes special characters for MarkdownV2."""
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å —Ç–æ—á–∫–∞ '.'
    special_chars = r'_*[]()~`>#+-=|{}.!' 
    return re.sub(f"([{re.escape(special_chars)}])", r"\\\1", text)

def build_order_list_keyboard(orders: list) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.
    –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    for order_id, order_date, client_name, total_amount in orders:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2 –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        escaped_client_name = client_name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[')
        buttons.append([
            InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} ({escaped_client_name}) - {total_amount:.2f}‚Ç¥", 
                                 callback_data=f"view_order_{order_id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑—ã
    if orders: 
        buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="confirm_all_orders")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="cancel_all_orders")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é)
    # buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á—ë—Ç–∞–º", callback_data="back_to_reports_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "/show_unconfirmed_orders")
@router.callback_query(F.data == "show_unconfirmed_orders")
async def show_unconfirmed_orders_report(callback_or_message, state: FSMContext):
    # –Ø–≤–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º message_object –∑–Ω–∞—á–µ–Ω–∏–µ–º None
    # –∏ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å Message –∏–ª–∏ None
    message_object: Message | None = None 

    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.answer() 
        message_object = callback_or_message.message
    else: # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ CallbackQuery, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ Message
        message_object = callback_or_message

    # –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ message_object –≤—Å–µ —Ä–∞–≤–Ω–æ None (—á—Ç–æ –∫—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
    # —Ç–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    if message_object is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ 'callback_or_message'.")
        # –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if isinstance(callback_or_message, CallbackQuery) and callback_or_message.message:
            await callback_or_message.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif isinstance(callback_or_message, Message):
            await callback_or_message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnboundLocalError

    logger.info("–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–∞ –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    
    unconfirmed_orders = await get_unconfirmed_orders()

    if not unconfirmed_orders:
        report_text = escape_markdown_v2("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.") 
        await message_object.answer(report_text, parse_mode="MarkdownV2") 
        return

    report_text_parts = [] 
    report_text_parts.append(f"*{escape_markdown_v2('–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:')}*\n\n") 

    order_ids = []
    for order in unconfirmed_orders:
        escaped_order_id = escape_markdown_v2(str(order.order_id))
        escaped_order_date = escape_markdown_v2(order.order_date.strftime('%d.%m.%Y'))
        escaped_delivery_date = escape_markdown_v2(order.delivery_date.strftime('%d.%m.%Y'))
        escaped_client_name = escape_markdown_v2(order.client_name)
        escaped_address_text = escape_markdown_v2(order.address_text)
        escaped_total_amount = escape_markdown_v2(f"{order.total_amount:.2f}")

        order_info = (
            f"–ó–∞–∫–∞–∑ ‚Ññ{escaped_order_id} –æ—Ç {escaped_order_date}\n"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {escaped_delivery_date}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {escaped_client_name}\n"
            f"–ê–¥—Ä–µ—Å: {escaped_address_text}\n"
            f"–°—É–º–º–∞: {escaped_total_amount} –≥—Ä–Ω\n"
            f"{escape_markdown_v2('----------------------------------')}\n"
        )
        report_text_parts.append(order_info)
        order_ids.append(order.order_id)
    
    report_text = "".join(report_text_parts)

    keyboard = create_confirm_report_keyboard(order_ids)
    
    # –°—Ç—Ä–æ–∫–∞ 106:
    await message_object.answer(report_text, reply_markup=keyboard, parse_mode="MarkdownV2")


@router.callback_query(F.data == "confirm_all_orders")
async def handle_confirm_all_orders(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã".
    """
    orders_to_confirm = await get_unconfirmed_orders()
    order_ids = [order[0] for order in orders_to_confirm] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ order_id

    if not order_ids:
        await callback.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        return

    success = await confirm_all_orders_in_db(order_ids)
    if success:
        await callback.message.edit_text("‚úÖ –í—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–∫–ª–∞–¥–Ω—ã–µ!")
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.")
    await callback.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    await show_unconfirmed_orders_report(callback, state)


@router.callback_query(F.data == "cancel_all_orders")
async def handle_cancel_all_orders(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã".
    """
    orders_to_cancel = await get_unconfirmed_orders()
    order_ids = [order[0] for order in orders_to_cancel] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ order_id

    if not order_ids:
        await callback.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        return

    success = await cancel_all_orders_in_db(order_ids)
    if success:
        await callback.message.edit_text("üóëÔ∏è –í—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.")
    await callback.answer()
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
    await show_unconfirmed_orders_report(callback, state)

@router.callback_query(F.data.startswith("view_order_"))
async def view_individual_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–∑–∂–µ).
    """
    order_id = int(callback.data.split("_")[2])
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
    # –ò –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await callback.answer(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–∑–∂–µ)", show_alert=True)
    # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ:
    # await state.set_state(OrderFSM.viewing_specific_order)