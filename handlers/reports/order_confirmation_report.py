import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command 
from states.order import OrderFSM 
from db_operations.report_order_confirmation import \
    get_unconfirmed_orders, confirm_order_in_db, cancel_order_in_db, \
    confirm_all_orders_in_db, cancel_all_orders_in_db 
from datetime import date
import re
from keyboards.inline_keyboards import create_confirm_report_keyboard

router = Router()
logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """Escapes special characters for MarkdownV2."""
    special_chars = r'_*[]()~`>#+-=|{}.!' 
    return re.sub(f"([{re.escape(special_chars)}])", r"\\\1", text)

def build_order_list_keyboard(orders: list) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.
    –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    buttons = []
    
    for order_id, order_date, client_name, total_amount in orders:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è escape_markdown_v2 –¥–ª—è client_name
        # –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ –∫–Ω–æ–ø–∫–∏
        escaped_client_name = escape_markdown_v2(client_name)
        buttons.append([
            InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} ({escaped_client_name}) - {total_amount:.2f}‚Ç¥", 
                                 callback_data=f"view_order_{order_id}")
        ])
    
    if orders: 
        buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="confirm_all_orders")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="cancel_all_orders")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "/show_unconfirmed_orders")
@router.callback_query(F.data == "show_unconfirmed_orders")
async def show_unconfirmed_orders_report(callback_or_message, state: FSMContext, db_pool):
    message_object: Message | None = None 

    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.answer() 
        message_object = callback_or_message.message
    else: 
        message_object = callback_or_message

    if message_object is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ 'callback_or_message'.")
        if isinstance(callback_or_message, CallbackQuery) and callback_or_message.message:
            await callback_or_message.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif isinstance(callback_or_message, Message):
            await callback_or_message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return 

    logger.info("–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–∞ –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    
    unconfirmed_orders = await get_unconfirmed_orders(db_pool) 

    if not unconfirmed_orders:
        report_text = escape_markdown_v2("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.") 
        await message_object.answer(report_text, parse_mode="MarkdownV2") 
        return

    report_text_parts = [] 
    report_text_parts.append(f"*{escape_markdown_v2('–ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:')}*\n\n") 

    order_ids = []
    for order in unconfirmed_orders:
        escaped_order_id = escape_markdown_v2(str(order.order_id))
        escaped_order_date = escape_markdown_v2(order.order_date.strftime('%d.%m.%Y'))
        escaped_delivery_date = escape_markdown_v2(order.delivery_date.strftime('%d.%m.%Y'))
        escaped_client_name = escape_markdown_v2(order.client_name)
        escaped_address_text = escape_markdown_v2(order.address_text)
        escaped_total_amount = escape_markdown_v2(f"{order.total_amount:.2f}")

        order_info = (
            f"–ó–∞–∫–∞–∑ ‚Ññ{escaped_order_id} –æ—Ç {escaped_order_date}\n"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {escaped_delivery_date}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {escaped_client_name}\n"
            f"–ê–¥—Ä–µ—Å: {escaped_address_text}\n"
            f"–°—É–º–º–∞: {escaped_total_amount} –≥—Ä–Ω\n"
            f"{escape_markdown_v2('----------------------------------')}\n"
        )
        report_text_parts.append(order_info)
        order_ids.append(order.order_id)
    
    report_text = "".join(report_text_parts)

    keyboard = create_confirm_report_keyboard(order_ids)
    
    await message_object.answer(report_text, reply_markup=keyboard, parse_mode="MarkdownV2")


@router.callback_query(F.data == "confirm_all_orders")
async def handle_confirm_all_orders(callback: CallbackQuery, state: FSMContext, db_pool):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã".
    """
    orders_to_confirm = await get_unconfirmed_orders(db_pool) 
    order_ids = [order[0] for order in orders_to_confirm] 

    if not order_ids:
        await callback.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", show_alert=True)
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        # await callback.message.delete() 
        return

    success = await confirm_all_orders_in_db(db_pool, order_ids) 
    if success:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —É—Å–ø–µ—Ö–µ (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ)
        await callback.answer(f"‚úÖ –í—Å–µ {len(order_ids)} –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!", show_alert=False)
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await callback.message.edit_text(escape_markdown_v2(f"‚úÖ –í—Å–µ {len(order_ids)} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–∫–ª–∞–¥–Ω—ã–µ!"), parse_mode="MarkdownV2")
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ (–∞–ª–µ—Ä—Ç)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await callback.message.edit_text(escape_markdown_v2("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤."), parse_mode="MarkdownV2")
    
    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã, –æ–±–Ω–æ–≤–∏—Ç–µ –æ—Ç—á–µ—Ç
    await show_unconfirmed_orders_report(callback, state, db_pool) 


@router.callback_query(F.data == "cancel_all_orders")
async def handle_cancel_all_orders(callback: CallbackQuery, state: FSMContext, db_pool):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã".
    """
    orders_to_cancel = await get_unconfirmed_orders(db_pool) 
    order_ids = [order[0] for order in orders_to_cancel] 

    if not order_ids:
        await callback.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", show_alert=True)
        # await callback.message.delete()
        return

    success = await cancel_all_orders_in_db(db_pool, order_ids) 
    if success:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —É—Å–ø–µ—Ö–µ (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ)
        await callback.answer(f"üóëÔ∏è –í—Å–µ {len(order_ids)} –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã!", show_alert=False)
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await callback.message.edit_text(escape_markdown_v2(f"üóëÔ∏è –í—Å–µ {len(order_ids)} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã."), parse_mode="MarkdownV2")
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ (–∞–ª–µ—Ä—Ç)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await callback.message.edit_text(escape_markdown_v2("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤."), parse_mode="MarkdownV2")
    
    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã, –æ–±–Ω–æ–≤–∏—Ç–µ –æ—Ç—á–µ—Ç
    await show_unconfirmed_orders_report(callback, state, db_pool)

@router.callback_query(F.data.startswith("view_order_"))
async def view_individual_order(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–∑–∂–µ).
    """
    order_id = int(callback.data.split("_")[2])
    await callback.answer(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –ø–æ–∑–∂–µ)", show_alert=True)