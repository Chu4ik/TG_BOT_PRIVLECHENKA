# handlers/inventory_adjustments/stock_adjustments_handler.py

import logging
import re
from datetime import date, datetime
from decimal import Decimal
from typing import List, Dict, Any, Optional
from utils.markdown_utils import escape_markdown_v2

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from states.order import OrderFSM
# –ò–ú–ü–û–†–¢–´ –ò–ó db_operations
from db_operations.product_operations import get_all_products_for_selection, ProductItem, record_stock_movement, get_product_by_id

router = Router()
logger = logging.getLogger(__name__)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def build_products_keyboard_for_adjustment(products: List[ProductItem]) -> InlineKeyboardMarkup:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."""
    buttons = []
    for product in products:
        buttons.append([
            InlineKeyboardButton(
                text=escape_markdown_v2(product.name),
                callback_data=f"select_stock_adj_product_{product.product_id}" # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π callback_data
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_any_adjustment_flow")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def build_confirm_stock_adjustment_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."""
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_stock_adjustment")], # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π callback_data
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_stock_adjustment_data")], # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π callback_data
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_any_adjustment_flow")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ö–û–†–†–ï–ö–¢–ò–†–û–í–û–ö –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–ò ---

async def start_stock_adjustment_flow(message: Message, state: FSMContext, db_pool):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ/—Å–ø–∏—Å–∞–Ω–∏–µ)."""
    # current_adjustment_type —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ main_adjustment_menu.py
    # await state.update_data(current_adjustment_type="stock_adjustment_in" –∏–ª–∏ "stock_adjustment_out")
    
    products = await get_all_products_for_selection(db_pool)
    if not products:
        await message.edit_text(escape_markdown_v2("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."), parse_mode="MarkdownV2")
        await state.clear()
        return

    await message.edit_text(
        escape_markdown_v2("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:"),
        reply_markup=build_products_keyboard_for_adjustment(products),
        parse_mode="MarkdownV2"
    )
    await state.set_state(OrderFSM.stock_adjustment_waiting_for_product)

@router.callback_query(F.data.startswith("select_stock_adj_product_"), StateFilter(OrderFSM.stock_adjustment_waiting_for_product))
async def process_stock_adjustment_product_selection(callback: CallbackQuery, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."""
    await callback.answer()
    product_id = int(callback.data.split("_")[3]) # select_stock_adj_product_ID
    
    product_info = await get_product_by_id(db_pool, product_id)
    product_name = product_info.name if product_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç"

    await state.update_data(adj_product_id=product_id, adj_product_name=product_name)
    
    state_data = await state.get_data()
    adj_type = state_data.get('current_adjustment_type')

    prompt_text = ""
    if adj_type == "stock_adjustment_in":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ *–æ–ø—Ä–∏—Ö–æ–¥—É–µ—Ç—Å—è* \\(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\\):"
    elif adj_type == "stock_adjustment_out":
        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ *—Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è* \\(—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\\):"
    
    await callback.message.edit_text(escape_markdown_v2(prompt_text), parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.stock_adjustment_waiting_for_quantity)

@router.message(StateFilter(OrderFSM.stock_adjustment_waiting_for_quantity))
async def process_stock_adjustment_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer(escape_markdown_v2("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."), parse_mode="MarkdownV2")
            return

        await state.update_data(adj_quantity=quantity)
        await message.answer(escape_markdown_v2("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ / –ø—Ä–∏—á–∏–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:"), parse_mode="MarkdownV2")
        await state.set_state(OrderFSM.stock_adjustment_waiting_for_description)
    except ValueError:
        await message.answer(escape_markdown_v2("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."), parse_mode="MarkdownV2")

@router.message(StateFilter(OrderFSM.stock_adjustment_waiting_for_description))
async def process_stock_adjustment_description(message: Message, state: FSMContext, db_pool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É."""
    description = message.text.strip()
    await state.update_data(adj_description=description)

    data = await state.get_data()
    adj_type = data['current_adjustment_type']
    product_name = data.get('adj_product_name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç")
    quantity = data['adj_quantity']
    description = data['adj_description']

    summary_text = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:*\n"
        f"–¢–∏–ø: `{escape_markdown_v2(adj_type)}`\n"
        f"–ü—Ä–æ–¥—É–∫—Ç: *{escape_markdown_v2(product_name)}*\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{quantity}` –µ–¥\\.\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {escape_markdown_v2(description)}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(
        summary_text,
        reply_markup=build_confirm_stock_adjustment_keyboard(),
        parse_mode="MarkdownV2"
    )
    await state.set_state(OrderFSM.stock_adjustment_confirm_data)

@router.callback_query(F.data == "confirm_stock_adjustment", StateFilter(OrderFSM.stock_adjustment_confirm_data))
async def confirm_and_record_stock_adjustment(callback: CallbackQuery, state: FSMContext, db_pool):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤ –ë–î."""
    await callback.answer()
    data = await state.get_data()
    adj_type = data['current_adjustment_type']
    product_id = data['adj_product_id']
    quantity = data['adj_quantity']
    description = data['adj_description']

    unit_cost_for_movement = None
    conn = None
    try:
        conn = await db_pool.acquire()
        # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ—Ä–µ–º –∏–∑ –º–∞—Å—Ç–µ—Ä-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞
        product_info = await conn.fetchrow("SELECT cost_per_unit FROM products WHERE product_id = $1", product_id)
        if product_info:
            unit_cost_for_movement = product_info['cost_per_unit']
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cost_per_unit –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID {product_id} –ø—Ä–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ.")
            await callback.message.edit_text(escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞. –û—Ç–º–µ–Ω–∞."), parse_mode="MarkdownV2")
            await state.clear()
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ cost_per_unit –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {e}", exc_info=True)
        await callback.message.edit_text(escape_markdown_v2("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –û—Ç–º–µ–Ω–∞."), parse_mode="MarkdownV2")
        await state.clear()
        return
    finally:
        if conn: await db_pool.release(conn)

    source_doc_type = 'inventory_adjustment'
    source_doc_id = None # –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—ã—á–Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑—ã–≤–∞—é—Ç—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É ID –¥–æ–∫—É–º–µ–Ω—Ç–∞

    success_stock_movement = await record_stock_movement(
        db_pool=db_pool,
        product_id=product_id,
        quantity=quantity,
        movement_type=adj_type, # 'stock_adjustment_in' –∏–ª–∏ 'stock_adjustment_out'
        source_document_type=source_doc_type,
        source_document_id=source_doc_id,
        unit_cost=unit_cost_for_movement,
        description=description
    )

    if success_stock_movement:
        await callback.message.edit_text(escape_markdown_v2(f"‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ ({adj_type}) —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!"), parse_mode="MarkdownV2")
    else:
        await callback.message.edit_text(escape_markdown_v2(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ ({adj_type})."), parse_mode="MarkdownV2")
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "edit_stock_adjustment_data", StateFilter(OrderFSM.stock_adjustment_confirm_data))
async def edit_stock_adjustment_data(callback: CallbackQuery, state: FSMContext, db_pool):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."""
    await callback.answer()
    state_data = await state.get_data()
    adj_type = state_data.get('current_adjustment_type')
    if adj_type:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞
        await start_stock_adjustment_flow(callback.message, state, db_pool)
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –ø–æ—á–µ–º—É-—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
        from handlers.inventory_adjustments.main_adjustment_menu import cmd_adjust_inventory
        await cmd_adjust_inventory(callback.message, state)