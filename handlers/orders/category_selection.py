# from aiogram import Router, F
# from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
# from aiogram.fsm.context import FSMContext
# from aiogram.filters import StateFilter
# from states.order import OrderFSM
# from db_operations.db import get_connection
# from handlers.orders.product_selection import show_products  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥

# router = Router()

# @router.message(StateFilter(OrderFSM.selecting_category))
# async def show_categories(message: Message, state: FSMContext):
#     conn = get_connection()
#     cur = conn.cursor()
#     cur.execute("SELECT category_id, name FROM categories ORDER BY name")
#     rows = cur.fetchall()
#     cur.close()
#     conn.close()

#     if not rows:
#         await message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")
#         return

#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
#         *[KeyboardButton(text=row[1]) for row in rows]
#     )

#     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id-—à–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
#     await state.update_data(category_map={row[1]: row[0] for row in rows})
#     await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)

# @router.message(StateFilter(OrderFSM.selecting_category))
# async def category_chosen(message: Message, state: FSMContext):
#     selected_text = message.text
#     state_data = await state.get_data()
#     category_map = state_data.get("category_map", {})

#     category_id = category_map.get(selected_text)

#     if not category_id:
#         await message.answer("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
#         return

#     await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {selected_text}", reply_markup=ReplyKeyboardRemove())
#     await state.set_state(OrderFSM.selecting_product)
#     await show_products(message, state, category_id)