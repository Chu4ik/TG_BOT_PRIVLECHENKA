# handlers/orders/order_editor.py
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states.order import OrderFSM
from utils.order_cache import order_cache, update_delivery_date
from datetime import date, timedelta
from decimal import Decimal
import logging
from keyboards.inline_keyboards import build_cart_keyboard

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º _send_cart_summary –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ order_helpers
from handlers.orders.order_helpers import _send_cart_summary
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º send_all_products –∏–∑ product_selection
from handlers.orders.product_selection import send_all_products

router = Router()
logger = logging.getLogger(__name__) 

def build_cart_keyboard(cart_len: int) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É", callback_data="edit_line")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="edit_delivery_date")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

async def show_cart_menu(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_order_data = order_cache.get(user_id, {})
    cart = user_order_data.get("cart", []) # <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£

    await _send_cart_summary(message, user_id)

    if cart:
        cart_len = len(cart)
        reply_markup = build_cart_keyboard(cart_len) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await message.answer("üõí –ú–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã:", reply_markup=reply_markup)
    else:
        # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ _send_cart_summary —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–∞—Ç—É,
        # —ç—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ _send_cart_summary —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                             reply_markup=ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        await send_all_products(message, state) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤
        await state.set_state(OrderFSM.selecting_product)

@router.callback_query(F.data == "edit_line")
async def request_line_to_edit(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = order_cache.get(user_id, {}).get("cart", [])

    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        await show_cart_menu(callback.message, state)
        return

    keyboard_buttons = []
    for i, item in enumerate(cart):
        keyboard_buttons.append([InlineKeyboardButton(text=f"{i+1}. {item['product_name']} ({item['quantity']} —à—Ç.)", callback_data=f"select_line_{i}")])

    keyboard_buttons.append([InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_cart")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(OrderFSM.editing_order)


@router.callback_query(StateFilter(OrderFSM.editing_order), F.data.startswith("select_line_"))
async def edit_line(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    cart = order_cache.get(user_id, {}).get("cart", [])

    if index >= len(cart) or index < 0:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏.", show_alert=True)
        await show_cart_menu(callback.message, state)
        return

    await state.update_data(editing_item_index=index)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_qty")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="remove_line")],
        [InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_cart")]
    ])
    item = order_cache[callback.from_user.id]["cart"][index]
    await callback.message.edit_text(
        f"üéØ <b>{item['product_name']}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']}\n–¶–µ–Ω–∞: {item['price']}‚Ç¥",
        reply_markup=keyboard, parse_mode="HTML"
    )

@router.callback_query(F.data == "edit_delivery_date")
async def edit_delivery_date(callback: CallbackQuery, state: FSMContext):
    kb = build_calendar_keyboard()
    await callback.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=kb)
    await state.set_state(OrderFSM.change_delivery_date)

@router.callback_query(F.data == "back_to_cart")
async def return_to_cart(callback: CallbackQuery, state: FSMContext):
    await show_cart_menu(callback.message, state)


def build_calendar_keyboard(days: int = 7) -> InlineKeyboardMarkup:
    today = date.today()
    keyboard_buttons = []
    for i in range(days):
        day = today + timedelta(days=i)
        keyboard_buttons.append([InlineKeyboardButton(text=day.strftime("%d.%m.%Y"), callback_data=f"set_date_{day.isoformat()}")])
    keyboard_buttons.append([InlineKeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_cart")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

@router.callback_query(StateFilter(OrderFSM.change_delivery_date), F.data.startswith("set_date_"))
async def set_delivery_date(callback: CallbackQuery, state: FSMContext):
    selected_date_str = callback.data.split("_")[2]
    selected_date = date.fromisoformat(selected_date_str)
    user_id = callback.from_user.id
    print(f"[DEBUG] set_delivery_date called for user_id: {user_id}. Current delivery_date: {order_cache.get(user_id, {}).get('delivery_date')}")
    update_delivery_date(user_id, selected_date)
    await callback.answer(f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {selected_date.strftime('%d.%m.%Y')}", show_alert=True)
    await show_cart_menu(callback.message, state)
    await state.set_state(OrderFSM.editing_order)
    print(f"[DEBUG] set_delivery_date completed for user_id: {user_id}. After setting: {order_cache.get(user_id, {}).get('delivery_date')}")

@router.callback_query(StateFilter(OrderFSM.editing_order), F.data == "edit_qty")
async def request_new_quantity(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(OrderFSM.editing_product_line)

@router.message(StateFilter(OrderFSM.editing_product_line))
async def process_new_quantity(message: Message, state: FSMContext):
    user_id = message.from_user.id
    state_data = await state.get_data()
    index = state_data.get("editing_item_index")

    if index is None:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é.")
        await show_cart_menu(message, state)
        return

    try:
        new_qty = int(message.text.strip())
        if new_qty <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return

    cart = order_cache[user_id]["cart"]
    if 0 <= index < len(cart):
        cart[index]["quantity"] = new_qty
        await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_qty} —à—Ç.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", reply_markup=ReplyKeyboardRemove())

    await show_cart_menu(message, state)
    await state.set_state(OrderFSM.editing_order)

@router.callback_query(StateFilter(OrderFSM.editing_order), F.data == "edit_price")
async def request_new_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await state.set_state(OrderFSM.editing_product_line)

@router.message(StateFilter(OrderFSM.editing_product_line))
async def process_new_price(message: Message, state: FSMContext):
    user_id = message.from_user.id
    state_data = await state.get_data()
    index = state_data.get("editing_item_index")

    if index is None:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é.")
        await show_cart_menu(message, state)
        return

    try:
        new_price = Decimal(message.text.strip().replace(',', '.'))
        if new_price < 0:
            raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
    except Exception:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.50).")
        return

    cart = order_cache[user_id]["cart"]
    if 0 <= index < len(cart):
        cart[index]["price"] = new_price
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price:.2f}‚Ç¥", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())

    await show_cart_menu(message, state)
    await state.set_state(OrderFSM.editing_order)


@router.callback_query(StateFilter(OrderFSM.editing_order), F.data == "remove_line")
async def remove_product_line(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    state_data = await state.get_data()
    index = state_data.get("editing_item_index")

    if index is None:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        await show_cart_menu(callback.message, state)
        return

    # –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
    user_order_data = order_cache.get(user_id, {})
    cart = user_order_data.get("cart", []) # –¢–µ–ø–µ—Ä—å 'cart' –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∫–æ–º (–∏–ª–∏ –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º)
    # –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø

    if 0 <= index < len(cart):
        removed_item = cart.pop(index)
        # –ü–æ—Å–∫–æ–ª—å–∫—É 'cart' —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–∏ 'user_order_data' (–∫–æ—Ç–æ—Ä—ã–π, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ dict –≤ order_cache),
        # –æ–ø–µ—Ä–∞—Ü–∏—è `.pop()` –∏–∑–º–µ–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–µ—à–µ.
        # –ü–æ—ç—Ç–æ–º—É —è–≤–Ω–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ `order_cache[user_id]["cart"] = cart` –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

        # –≠—Ç–∏ –ª–æ–≥–∏ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"[DEBUG] remove_product_line called for user_id: {user_id}. Current cart: {order_cache.get(user_id, {}).get('cart')}")

        await callback.answer(f"üóë –°—Ç—Ä–æ–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º '{removed_item['product_name']}' —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

        logger.debug(f"[DEBUG] remove_product_line completed for user_id: {user_id}. After removal: {order_cache.get(user_id, {}).get('cart')}")
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏.", show_alert=True)

    await show_cart_menu(callback.message, state)
    await state.set_state(OrderFSM.editing_order)
    current_cart_for_debug = order_cache.get(user_id, {}).get('cart', [])
    print(f"[DEBUG] remove_product_line completed for user_id: {user_id}. After removal: {current_cart_for_debug}")

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    order_data = order_cache.get(user_id)
    if not order_data or not order_data.get("cart"):
        await callback.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å.", show_alert=True)
        await show_cart_menu(callback.message, state)
        return

    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! (–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)", show_alert=True)
    await callback.message.edit_text("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–ø–∞—Å–∏–±–æ!")
    await state.clear()