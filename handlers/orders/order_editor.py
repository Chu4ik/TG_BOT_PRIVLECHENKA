# handlers/orders/order_editor.py
import logging
from decimal import Decimal
from datetime import date, timedelta
import re # <-- –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ò–ú–ü–û–†–¢ –î–õ–Ø –†–ï–ì–£–õ–Ø–†–ù–´–• –í–´–†–ê–ñ–ï–ù–ò–ô

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from handlers.orders.order_helpers import _get_cart_summary_text # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç escape_markdown_v2
from utils.order_cache import order_cache
from keyboards.inline_keyboards import build_cart_keyboard, delivery_date_keyboard
from states.order import OrderFSM

# --- –¢–û–ß–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø escape_markdown_v2 (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å) ---
def escape_markdown_v2(text: str) -> str:
    """
    Helper function to escape telegram markup symbols in MarkdownV2.
    Escapes characters: _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., !
    """
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return "".join(["\\" + char if char in escape_chars else char for char in text])

router = Router()
logger = logging.getLogger(__name__)

async def show_cart_menu(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã —Å —Ç–µ–∫—É—â–µ–π —Å–≤–æ–¥–∫–æ–π.
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    –î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    user_id = message.from_user.id
    state_data = await state.get_data()
    cart_items = state_data.get("cart", [])
    delivery_date = state_data.get("delivery_date")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏ –ë–ï–ó –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    raw_summary_content = await _get_cart_summary_text(cart_items, delivery_date)
    logger.debug(f"RAW content text (from order_helpers): '{raw_summary_content}'")
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç)
    # –∏ —Ç–æ–ª—å–∫–æ –ü–û–¢–û–ú —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –û–î–ò–ù –†–ê–ó
    
    formatted_summary_lines = []
    lines = raw_summary_content.split('\n')
    
    for line in lines:
        if line.startswith("---"):
            formatted_summary_lines.append(line) # –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        elif line.startswith("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:"):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            formatted_summary_lines.append(f"*{line}*")
        elif line.startswith("--- –¢–û–í–ê–†–´ ---"):
            formatted_summary_lines.append(line) # –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        elif line.startswith("–ò–¢–û–ì–û:"):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
            formatted_summary_lines.append(f"*{line}*")
        elif line.startswith("  –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."):
            formatted_summary_lines.append(line)
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. –ü—Ä–æ–¥—É–∫—Ç"), —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞.
        # –î–ª—è —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–Ω—ã–º,
        # —Ç–∞–∫ –∫–∞–∫ _get_cart_summary_text —É–∂–µ –¥–∞–µ—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        elif re.match(r"^\d+\.", line): # –ò—Å–ø–æ–ª—å–∑—É–µ–º regex –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            formatted_summary_lines.append(line)
        else: # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è
            formatted_summary_lines.append(line)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–æ—Ç–æ–≤—ã–π –∫ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    pre_escaped_text = "\n".join(formatted_summary_lines)
    logger.debug(f"PRE-ESCAPED text (after MarkdownV2 formatting): '{pre_escaped_text}'")

    # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –í–°–ï–ú–£ —Ç–µ–∫—Å—Ç—É –û–î–ò–ù –†–ê–ó
    summary_text = escape_markdown_v2(pre_escaped_text)
    logger.debug(f"ESCAPED summary text (final for Telegram): '{summary_text}'")

    markup = build_cart_keyboard(len(cart_items))

    previous_message_id = state_data.get("last_cart_message_id")
    actual_message_obj = message
    edited_successfully = False

    if previous_message_id:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=previous_message_id,
                text=summary_text,
                reply_markup=markup,
                parse_mode="MarkdownV2"
            )
            edited_successfully = True
            logger.debug(f"Successfully edited previous cart message {previous_message_id}")
        except TelegramBadRequest as e:
            logger.warning(f"Failed to edit message {previous_message_id}: {e}. Sending new message.")
        except Exception as e:
            logger.error(f"An unexpected error occurred while editing message {previous_message_id}: {e}")

    if not edited_successfully:
        sent_message = await actual_message_obj.answer(
            summary_text,
            reply_markup=markup,
            parse_mode="MarkdownV2"
        )
        await state.update_data(last_cart_message_id=sent_message.message_id)
        logger.debug(f"Sent new cart message {sent_message.message_id}")

    if not cart_items:
        await state.set_state(OrderFSM.selecting_product)
        from handlers.orders.product_selection import send_all_products
        await send_all_products(message, state)
    else:
        await state.set_state(OrderFSM.editing_order)


@router.callback_query(F.data == "edit_line")
async def edit_line(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    state_data = await state.get_data()
    cart_items = state_data.get("cart", [])

    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", show_alert=True)
        await show_cart_menu(callback.message, state)
        return

    keyboard_buttons = []
    for idx, item in enumerate(cart_items):
        # –ó–¥–µ—Å—å –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏, –æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç MarkdownV2 —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        button_text = f"‚ùå {item['product_name']} ({item['quantity']} —à—Ç.)"
        callback_data = f"remove_line:{item['product_id']}"
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="back_to_cart_menu")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    message_text_raw = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    message_text_escaped = escape_markdown_v2(message_text_raw)
    await callback.message.edit_text(message_text_escaped, reply_markup=markup, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.editing_item)


@router.callback_query(StateFilter(OrderFSM.editing_item), F.data.startswith("remove_line:"))
async def remove_product_line(callback: CallbackQuery, state: FSMContext):
    product_id_to_remove = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    state_data = await state.get_data()
    cart = state_data.get("cart", [])
    
    item_index_to_remove = next((i for i, item in enumerate(cart) if item["product_id"] == product_id_to_remove), None)

    if item_index_to_remove is not None:
        removed_item = cart.pop(item_index_to_remove)
        await state.update_data(cart=cart)
        
        order_cache[user_id]["cart"] = cart 

        logger.debug(f"[DEBUG] remove_product_line called for user_id: {user_id}. Current cart: {cart}")
        # –¢–µ–∫—Å—Ç –¥–ª—è alert –Ω–µ —Ç—Ä–µ–±—É–µ—Ç MarkdownV2
        await callback.answer(f"üóë –°—Ç—Ä–æ–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º '{removed_item['product_name']}' —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        logger.debug(f"[DEBUG] remove_product_line completed for user_id: {user_id}. After removal: {cart}")
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏.", show_alert=True)

    await show_cart_menu(callback.message, state)
    await state.set_state(OrderFSM.editing_order)
    current_cart_for_debug = (await state.get_data()).get('cart', [])
    print(f"[DEBUG] remove_product_line completed for user_id: {user_id}. After removal: {current_cart_for_debug}")


@router.callback_query(F.data == "back_to_cart_menu")
async def back_to_cart_menu(callback: CallbackQuery, state: FSMContext):
    await show_cart_menu(callback.message, state)
    await state.set_state(OrderFSM.editing_order)


@router.callback_query(F.data == "edit_delivery_date")
async def edit_delivery_date(callback: CallbackQuery, state: FSMContext):
    today = date.today()
    dates = []
    for i in range(1, 8):
        d = today + timedelta(days=i)
        if d.weekday() < 5:
            dates.append(d)
    
    markup = delivery_date_keyboard(today)
    
    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    message_text_raw = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:"
    message_text_escaped = escape_markdown_v2(message_text_raw)
    await callback.message.edit_text(message_text_escaped, reply_markup=markup, parse_mode="MarkdownV2")
    await state.set_state(OrderFSM.change_delivery_date)


@router.callback_query(StateFilter(OrderFSM.change_delivery_date), F.data.startswith("date:"))
async def process_delivery_date_selection(callback: CallbackQuery, state: FSMContext):
    selected_date_str = callback.data.split(":")[1]
    selected_date = date.fromisoformat(selected_date_str)
    
    user_id = callback.from_user.id
    await state.update_data(delivery_date=selected_date)
    order_cache[user_id]["delivery_date"] = selected_date

    # –¢–µ–∫—Å—Ç –¥–ª—è alert –Ω–µ —Ç—Ä–µ–±—É–µ—Ç MarkdownV2
    await callback.answer(f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {selected_date.strftime('%d.%m.%Y')}", show_alert=True)
    await show_cart_menu(callback.message, state)


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    state_data = await state.get_data()
    cart_items = state_data.get("cart", [])
    delivery_date = state_data.get("delivery_date")

    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.", show_alert=True)
        await show_cart_menu(callback.message, state)
        return

    if not delivery_date:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.", show_alert=True)
        await edit_delivery_date(callback, state)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
    raw_summary_content = await _get_cart_summary_text(cart_items, delivery_date)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–∞–∫ –≤ show_cart_menu
    formatted_summary_lines = []
    lines = raw_summary_content.split('\n')
    for line in lines:
        if line.startswith("---"):
            formatted_summary_lines.append(line)
        elif line.startswith("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:"):
            formatted_summary_lines.append(f"*{line}*")
        elif line.startswith("--- –¢–û–í–ê–†–´ ---"):
            formatted_summary_lines.append(line)
        elif line.startswith("–ò–¢–û–ì–û:"):
            formatted_summary_lines.append(f"*{line}*")
        elif line.startswith("  –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."):
            formatted_summary_lines.append(line)
        elif re.match(r"^\d+\.", line):
            formatted_summary_lines.append(line)
        else:
            formatted_summary_lines.append(line)

    pre_escaped_text_for_confirm = "\n".join(formatted_summary_lines)
    escaped_summary_text = escape_markdown_v2(pre_escaped_text_for_confirm)

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º \\n –Ω–∞ –æ–±—ã—á–Ω—ã–π \n, —Ç–∞–∫ –∫–∞–∫ escape_markdown_v2 —É–∂–µ –≤—Å–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç
    final_message = (
        f"{escape_markdown_v2('‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!')}\n\n"
        f"{escaped_summary_text}\n\n"
        f"{escape_markdown_v2('–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.')}"
    )

    await callback.message.edit_text(
        final_message, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é final_message
        parse_mode="MarkdownV2",
        reply_markup=None
    )
    await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
    await state.clear()