from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states.order import OrderFSM
from utils.order_cache import order_cache
from db_operations.db import get_connection
from handlers.orders.product_selection import send_all_products

router = Router()

@router.message(StateFilter(OrderFSM.client_selected))
async def choose_address(message: Message, state: FSMContext):
    state_data = await state.get_data()
    client_name = state_data.get("client_name")

    # –ü–æ–ª—É—á–∞–µ–º client_id
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT client_id FROM clients WHERE name = %s", (client_name,))
    result = cur.fetchone()

    if not result:
        await message.answer("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    client_id = result[0]
    order_cache[message.from_user.id]["client_id"] = client_id

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞
    cur.execute("""
        SELECT address_id, address_text 
        FROM addresses 
        WHERE client_id = %s
    """, (client_id,))
    rows = cur.fetchall()
    cur.close()
    conn.close()

    if not rows:
        await message.answer("‚ö†Ô∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.")
        return

    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –æ–¥–∏–Ω ‚Äî –∞–≤—Ç–æ-–≤—ã–±–æ—Ä
    if len(rows) == 1:
        address_id, address_text = rows[0]
        order_cache[message.from_user.id]["address_id"] = address_id
        await message.answer(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {address_text}", reply_markup=ReplyKeyboardRemove())

        await state.set_state(OrderFSM.selecting_product)
        await send_all_products(message)
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
    buttons = [KeyboardButton(text=row[1]) for row in rows]
    rows_markup = [[button] for button in buttons]  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    keyboard = ReplyKeyboardMarkup(
        keyboard=rows_markup,
        resize_keyboard=True
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –≤ FSM
    await state.update_data(address_map={row[1]: row[0] for row in rows})
    await message.answer("üè† –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(OrderFSM.selecting_address)

    print(f"[FSM] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

@router.message(StateFilter(OrderFSM.selecting_address))
async def address_chosen(message: Message, state: FSMContext):
    print(f"[FSM] –í–æ—à–ª–∏ –≤ address_chosen")
    selected_text = message.text.strip()
    state_data = await state.get_data()
    address_map = state_data.get("address_map", {})
    print(f"[FSM] message.text = {selected_text}")
    print(f"[FSM] address_map.keys() = {list(address_map.keys())}")
    print(f"[FSM] FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    address_id = address_map.get(selected_text)

    if not address_id:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    user_id = message.from_user.id
    order_cache[user_id]["address_id"] = address_id
    await state.update_data(address_id=address_id)

    await message.answer(f"‚úÖ –ê–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω: {selected_text}", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OrderFSM.selecting_product)
    await send_all_products(message)