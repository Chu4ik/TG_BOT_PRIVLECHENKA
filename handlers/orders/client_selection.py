from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states.order import OrderFSM
from utils.order_cache import init_order
from db_operations.db import get_connection
from handlers.orders.addresses_selection import choose_address

router = Router()

@router.message(F.text.in_({"‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", "/order"}))
async def start_order(message: Message, state: FSMContext):
    init_order(message.from_user.id)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(OrderFSM.selecting_client)

@router.message(StateFilter(OrderFSM.selecting_client))
async def search_clients(message: Message, state: FSMContext):
    print(f"FSM state: {await state.get_state()}")
    query = message.text.lower()
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT name FROM clients WHERE LOWER(name) LIKE %s", (f"%{query}%",))
    clients = [row[0] for row in cur.fetchall()]
    if not clients:
        print("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    else:
        print(f"–ù–∞—à—ë–ª: {clients}")
    cur.close()
    conn.close()

    if clients:
        buttons = [KeyboardButton(text=name) for name in clients]
        rows = [[button] for button in buttons]  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

        # –ò–ª–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ:
        # rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]

        keyboard = ReplyKeyboardMarkup(
            keyboard=rows,
            resize_keyboard=True
        )

        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=keyboard)
        await state.set_state(OrderFSM.client_selected)
    else:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîÅ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )

        await message.answer("üòï –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.", reply_markup=keyboard)

@router.message(StateFilter(OrderFSM.client_selected))
async def client_chosen(message: Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await message.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω: {message.text}", reply_markup=ReplyKeyboardRemove())
    await choose_address(message, state)

