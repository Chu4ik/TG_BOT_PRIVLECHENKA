import re
from datetime import date
from decimal import Decimal

from aiogram.types import Message
from states.order import OrderFSM
from utils.order_cache import order_cache


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤ —Ç–µ–∫—Å—Ç–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ replace() –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
    """
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–æ—Å—É—é —á–µ—Ä—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–∞–º–µ–Ω–∞–º–∏
    text = text.replace("\\", "\\\\")

    # –ü–µ—Ä–µ—á–µ–Ω—å –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    special_chars = "_*[]()~`>#+-=|{}.!"

    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text


async def _send_cart_summary(message: Message, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â—É—é —Å–≤–æ–¥–∫—É –∫–æ—Ä–∑–∏–Ω—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ –æ–±—â–µ–π —Å—É–º–º–æ–π."""
    user_order_data = order_cache.get(user_id, {})
    cart_items = user_order_data.get("cart", [])
    delivery_date = user_order_data.get("delivery_date")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã —Å —É—á–µ—Ç–æ–º –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    if not cart_items and not delivery_date:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        empty_cart_message = escape_markdown_v2("--- –¢–û–í–ê–†–´ –í –ó–ê–ö–ê–ó–ï ---\n–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n------------------------\n")
        await message.answer(empty_cart_message, parse_mode="MarkdownV2")
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–≤–æ–¥–∫–∏ —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –∫–æ –≤—Å–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –≤ –∫–æ–Ω—Ü–µ.
    summary_lines = ["--- –°–í–û–î–ö–ê –ó–ê–ö–ê–ó–ê ---"]

    if delivery_date:
        # **–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:** –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ escape_markdown_v2, –∞ –¥–∞—Ç–∞ - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
        summary_lines.append(f"üìÖ **–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:** {delivery_date.strftime('%d.%m.%Y')}")
    else:
        summary_lines.append("üìÖ **–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:** –ù–µ —É–∫–∞–∑–∞–Ω–∞")

    summary_lines.append("\n--- –¢–û–í–ê–†–´ ---")
    total_quantity_all_items = 0
    grand_total = Decimal('0.0')

    if not cart_items:
        summary_lines.append("  –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        for i, item in enumerate(cart_items):
            price = item.get('price', Decimal('0.0'))
            item_total = item["quantity"] * price
            total_quantity_all_items += item["quantity"]
            grand_total += item_total
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
            # escape_markdown_v2 –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–µ—Ñ–∏—Å—ã, —Ç–æ—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            summary_lines.append(f"{i+1}. {item['product_name']} - {item['quantity']} —à—Ç. x {price:.2f}‚Ç¥ = {item_total:.2f}‚Ç¥")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    summary_lines.append("------------------------")
    summary_lines.append(f"*–ò–¢–û–ì–û:* {total_quantity_all_items} —à—Ç. –Ω–∞ —Å—É–º–º—É {grand_total:.2f}‚Ç¥")
    summary_lines.append("------------------------")

    final_summary_text = "\n".join(summary_lines)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º escape_markdown_v2 –æ–¥–∏–Ω —Ä–∞–∑ –∫–æ –≤—Å–µ–º—É —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
    escaped_summary_text = escape_markdown_v2(final_summary_text)
    
    await message.answer(escaped_summary_text, parse_mode="MarkdownV2")