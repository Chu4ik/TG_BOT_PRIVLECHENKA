# handlers/orders/product_selection.py
from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states.order import OrderFSM
from utils.order_cache import order_cache, add_to_cart
from db_operations.db import get_connection
from decimal import Decimal # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Decimal
from handlers.orders.order_helpers import _send_cart_summary

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º _send_cart_summary –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from handlers.orders.order_helpers import _send_cart_summary
# –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º —Ç–∞–∫–∂–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è show_cart_menu –∏–∑ order_editor.py –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.
# –ï—Å–ª–∏ –¥–∞, —Ç–æ –ò–ú–ü–û–†–¢–ò–†–£–ô–¢–ï –ï–ì–û –í–ù–£–¢–†–ò –§–£–ù–ö–¶–ò–ò, –≥–¥–µ –æ–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ü–∏–∫–ª.
# from handlers.orders.order_editor import show_cart_menu # –ù–ï –ò–ú–ü–û–†–¢–ò–†–£–ô–¢–ï –ó–î–ï–°–¨ –ù–ê–ü–†–Ø–ú–£–Æ!

router = Router()

async def send_all_products(message: Message, state: FSMContext):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT product_id, name, price FROM products ORDER BY name") # –î–æ–±–∞–≤–∏–ª price
    products = cur.fetchall()
    cur.close()
    conn.close()

    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    buttons = [KeyboardButton(text=name) for _, name, _ in products]
    rows = [[btn] for btn in buttons]
    keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM
    product_map = {name: {"product_id": product_id, "price": price} for product_id, name, price in products}
    await state.update_data(product_map=product_map)

    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)


@router.message(StateFilter(OrderFSM.selecting_product))
async def product_chosen(message: Message, state: FSMContext):
    state_data = await state.get_data()
    product_map = state_data.get("product_map")
    selected_product_name = message.text.strip()

    if selected_product_name not in product_map:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    selected_product_info = product_map[selected_product_name]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ, –≤–∫–ª—é—á–∞—è —Ü–µ–Ω—É
    await state.update_data(selected_product={
        "product_id": selected_product_info["product_id"],
        "product_name": selected_product_name,
        "price": selected_product_info["price"] # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∑–¥–µ—Å—å
    })

    await state.set_state(OrderFSM.awaiting_quantity)
    await message.answer(
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{selected_product_name}</b>\n"
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(StateFilter(OrderFSM.awaiting_quantity))
async def quantity_entered(message: Message, state: FSMContext):
    qty_text = message.text.strip()

    if not qty_text.isdigit():
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    qty = int(qty_text)
    if qty <= 0:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    state_data = await state.get_data()
    selected = state_data.get("selected_product")

    if not selected:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.")
        return

    selected["quantity"] = qty # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
    user_id = message.from_user.id

    # Add to cart handles checking for duplicates and updating quantity
    # and ensuring 'price' is Decimal.
    cart = order_cache.setdefault(user_id, {}).setdefault("cart", [])

    existing = next((item for item in cart if item["product_id"] == selected["product_id"]), None)

    if existing:
        existing["quantity"] += qty
        await message.answer(
            f"üîÅ –¢–æ–≤–∞—Ä <b>{selected['product_name']}</b> —É–∂–µ –±—ã–ª –≤ –∑–∞–∫–∞–∑–µ.\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ <b>{existing['quantity']}</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        cart.append(selected) # 'selected' —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'price'
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑: <b>{selected['product_name']}</b> √ó {qty}",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )

    # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await state.set_state(OrderFSM.choosing_next_action)


@router.message(StateFilter(OrderFSM.choosing_next_action))
async def handle_next_action(message: Message, state: FSMContext):
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä":
        await state.set_state(OrderFSM.selecting_product)
        await send_all_products(message, state)
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑":
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º show_cart_menu –∑–¥–µ—Å—å
        from handlers.orders.order_editor import show_cart_menu # <-- –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç
        await show_cart_menu(message, state) # –ü–µ—Ä–µ–¥–∞–µ–º state
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –≤–Ω—É—Ç—Ä–∏ show_cart_menu –Ω–∞ editing_order
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        await _send_cart_summary(message, message.from_user.id)
        buttons = [
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)