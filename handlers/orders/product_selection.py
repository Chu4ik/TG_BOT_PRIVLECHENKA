from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states.order import OrderFSM
from utils.order_cache import order_cache, add_to_cart
from db_operations.db import get_connection

router = Router()

async def send_all_products(message: Message):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT product_id, name FROM products ORDER BY name")
    products = cur.fetchall()
    cur.close()
    conn.close()

    if not products:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    buttons = [KeyboardButton(text=name) for _, name in products]
    rows = [[btn] for btn in buttons]
    keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)

@router.message(StateFilter(OrderFSM.selecting_product))
async def show_all_products(message: Message, state: FSMContext):
    await send_all_products(message)

@router.message(StateFilter(OrderFSM.selecting_product))
async def product_chosen(message: Message, state: FSMContext):
    state_data = await state.get_data()
    product_map = state_data.get("product_map", {})

    product_name = message.text
    product_id = product_map.get(product_name)

    if not product_id:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data({
        "product_id": product_id,
        "product_name": product_name
    })

    await message.answer(
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{product_name}</b>\n"
        f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML"
    )
    await state.set_state(OrderFSM.awaiting_quantity)

@router.message(StateFilter(OrderFSM.awaiting_quantity))
async def quantity_entered(message: Message, state: FSMContext):
    print(f"[FSM] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}") 
    try:
        qty = int(message.text)
        if qty <= 0:
            raise ValueError
    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    state_data = await state.get_data()
    selected = state_data.get("selected_product")

    if not selected:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.")
        return

    selected["quantity"] = qty
    user_id = message.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if "cart" not in order_cache[user_id]:
        order_cache[user_id]["cart"] = []

    cart = order_cache[user_id]["cart"]

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    existing = next((item for item in cart if item["product_id"] == selected["product_id"]), None)

    if existing:
        existing["quantity"] += qty
        await message.answer(
            f"üîÅ –¢–æ–≤–∞—Ä <b>{selected['product_name']}</b> —É–∂–µ –±—ã–ª –≤ –∑–∞–∫–∞–∑–µ.\n"
            f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ <b>{existing['quantity']}</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        cart.append(selected)
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑: <b>{selected['product_name']}</b> √ó {qty}",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )

    await state.set_state(OrderFSM.editing_order)

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
    try:
        from handlers.orders.order_editor import show_cart_menu
        await show_cart_menu(message, state)
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.")