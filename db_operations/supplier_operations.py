# handlers/reports/supplier_reports.py

import logging
import re
from datetime import date, datetime
from decimal import Decimal
from typing import List

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
from db_operations.supplier_operations import (
    get_incoming_deliveries_for_date,
    get_supplier_payments_for_date,
    IncomingDeliveryReportItem,
    SupplierPaymentReportItem
)

router = Router()
logger = logging.getLogger(__name__)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
def escape_markdown_v2(text: str) -> str:
    """Escapes special characters for MarkdownV2."""
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à '\' –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    special_chars = r'_*[]()~`>#+-=|{}.!\'\\'
    return re.sub(f"([{re.escape(special_chars)}])", r"\\\1", text)

@router.message(Command("incoming_deliveries_today"))
async def show_incoming_deliveries_report(message: Message, db_pool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    today = date.today()
    today_str = today.strftime('%d.%m.%Y')
    
    deliveries = await get_incoming_deliveries_for_date(db_pool, today)
    
    report_parts = []
    report_parts.append(f"üì¶ *–û—Ç—á–µ—Ç –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è—Ö —Ç–æ–≤–∞—Ä–∞ –∑–∞ {escape_markdown_v2(today_str)}:*\n\n")
    
    total_cost_of_deliveries = Decimal('0.00')

    if not deliveries:
        report_parts.append(escape_markdown_v2("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞."))
    else:
        for i, item in enumerate(deliveries):
            report_parts.append(
                f"*{i+1}\\. –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ ID {item.delivery_id}*\n"
                f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫: {escape_markdown_v2(item.supplier_name)}\n"
                f"   –¢–æ–≤–∞—Ä: {escape_markdown_v2(item.product_name)}\n"
                f"   –ö–æ–ª-–≤–æ: `{item.quantity}` –µ–¥\\. –ø–æ `{item.unit_cost:.2f} ‚Ç¥`\n"
                f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: `{item.total_cost:.2f} ‚Ç¥`\n"
                f"{escape_markdown_v2('----------------------------------')}\n"
            )
            total_cost_of_deliveries += item.total_cost
        
        report_parts.append(f"*–ò–¢–û–ì–û –ü–û–°–¢–£–ü–õ–ï–ù–ò–ô –ó–ê –°–ï–ì–û–î–ù–Ø: `{total_cost_of_deliveries:.2f} ‚Ç¥`*")

    final_report_text = "".join(report_parts)
    
    await message.answer(final_report_text, parse_mode="MarkdownV2")


@router.message(Command("supplier_payments_today"))
async def show_supplier_payments_report(message: Message, db_pool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø–ª–∞—Ç–∞—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    today = date.today()
    today_str = today.strftime('%d.%m.%Y')
    
    payments = await get_supplier_payments_for_date(db_pool, today)
    
    report_parts = []
    report_parts.append(f"üí∏ *–û—Ç—á–µ—Ç –æ–± –æ–ø–ª–∞—Ç–∞—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –∑–∞ {escape_markdown_v2(today_str)}:*\n\n")
    
    total_paid_amount = Decimal('0.00')

    if not payments:
        report_parts.append(escape_markdown_v2("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ–ø–ª–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º."))
    else:
        for i, payment in enumerate(payments):
            delivery_info = f" (–ü–æ—Å—Ç–∞–≤–∫–∞ ID: `{payment.delivery_id}`)" if payment.delivery_id else ""
            report_parts.append(
                f"*{i+1}\\. –û–ø–ª–∞—Ç–∞ ID {payment.payment_id}*\n"
                f"   –ü–æ—Å—Ç–∞–≤—â–∏–∫: {escape_markdown_v2(payment.supplier_name)}\n"
                f"   –°—É–º–º–∞: `{payment.amount:.2f} ‚Ç¥`\n"
                f"   –ú–µ—Ç–æ–¥: {escape_markdown_v2(payment.payment_method)}{escape_markdown_v2(delivery_info)}\n"
                f"   –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: `{payment.payment_date.strftime('%Y-%m-%d')}`\n"
                f"{escape_markdown_v2('----------------------------------')}\n"
            )
            total_paid_amount += payment.amount
        
        report_parts.append(f"*–ò–¢–û–ì–û –û–ü–õ–ê–ß–ï–ù–û –ü–û–°–¢–ê–í–©–ò–ö–ê–ú –ó–ê –°–ï–ì–û–î–ù–Ø: `{total_paid_amount:.2f} ‚Ç¥`*")

    final_report_text = "".join(report_parts)
    
    await message.answer(final_report_text, parse_mode="MarkdownV2")